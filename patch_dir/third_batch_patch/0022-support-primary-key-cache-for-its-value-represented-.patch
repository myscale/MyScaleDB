From 2945b17bbb062092418223ffc04410dde165b256 Mon Sep 17 00:00:00 2001
From: Xu Jing <xuj@moqi.ai>
Date: Fri, 10 Mar 2023 13:02:24 +0800
Subject: [PATCH 22/51] support primary key cache for its value represented by
 number and add integration tests for it

---
 .../MergeTreeBaseSelectProcessor.cpp          |   2 +-
 ...MergeTreeSelectWithVectorScanProcessor.cpp |   2 +-
 .../MergeTree/PrimaryKeyCacheManager.cpp      |   3 +-
 .../test_mqvs_primary_key_cache/test.py       |   4 +-
 .../__init__.py                               |   0
 .../configs/config_information.xml            |  26 ++
 .../test.py                                   | 355 ++++++++++++++++++
 7 files changed, 386 insertions(+), 6 deletions(-)
 create mode 100644 tests/integration/test_mqvs_primary_key_cache_data_type/__init__.py
 create mode 100644 tests/integration/test_mqvs_primary_key_cache_data_type/configs/config_information.xml
 create mode 100644 tests/integration/test_mqvs_primary_key_cache_data_type/test.py

diff --git a/src/Storages/MergeTree/MergeTreeBaseSelectProcessor.cpp b/src/Storages/MergeTree/MergeTreeBaseSelectProcessor.cpp
index 5aee605053..22cb0e98e1 100644
--- a/src/Storages/MergeTree/MergeTreeBaseSelectProcessor.cpp
+++ b/src/Storages/MergeTree/MergeTreeBaseSelectProcessor.cpp
@@ -440,7 +440,7 @@ MergeTreeBaseSelectProcessor::BlockAndRowCount MergeTreeBaseSelectProcessor::rea
         /// if and only if
         /// 1. this task is vector search
         /// 2. primary key is only a column, and select columns is (pk, distance) or (pk, batch_distance)
-        /// 3. primary key's type is UInt32 or UInt64
+        /// 3. primary key's value is represented by number
         bool match = PrimaryKeyCacheManager::isSupportedPrimaryKey(pk_description)
             && isVectorSearchByPk(pk_description.column_names, task->ordered_names);
 
diff --git a/src/Storages/MergeTree/MergeTreeSelectWithVectorScanProcessor.cpp b/src/Storages/MergeTree/MergeTreeSelectWithVectorScanProcessor.cpp
index ea39e3fb75..307480f694 100644
--- a/src/Storages/MergeTree/MergeTreeSelectWithVectorScanProcessor.cpp
+++ b/src/Storages/MergeTree/MergeTreeSelectWithVectorScanProcessor.cpp
@@ -272,7 +272,7 @@ MergeTreeBaseSelectProcessor::BlockAndRowCount MergeTreeSelectWithVectorScanProc
         /// consider cache if and only if
         /// 1. this task is vector search and no prewhere info
         /// 2. primary key is only a column, and select columns are (pk, distance) or (pk, batch_distance)
-        /// 3. primary key's type is UInt32 or UInt64
+        /// 3. primary key's value is represented by number
         if (enable_primary_key_cache)
         {
             use_primary_key_cache = PrimaryKeyCacheManager::isSupportedPrimaryKey(primary_key)
diff --git a/src/Storages/MergeTree/PrimaryKeyCacheManager.cpp b/src/Storages/MergeTree/PrimaryKeyCacheManager.cpp
index d034f1a65c..374ece018c 100644
--- a/src/Storages/MergeTree/PrimaryKeyCacheManager.cpp
+++ b/src/Storages/MergeTree/PrimaryKeyCacheManager.cpp
@@ -45,8 +45,7 @@ bool PrimaryKeyCacheManager::isSupportedPrimaryKey(const KeyDescription & primar
     if (primary_key.data_types.size() != 1)
         return false;
 
-    String type_name = primary_key.data_types[0]->getName();
-    return type_name == "UInt32" || type_name == "UInt64";
+    return primary_key.data_types[0]->isValueRepresentedByNumber();
 }
 
 
diff --git a/tests/integration/test_mqvs_primary_key_cache/test.py b/tests/integration/test_mqvs_primary_key_cache/test.py
index 5d637feac7..4fc86b3c0d 100644
--- a/tests/integration/test_mqvs_primary_key_cache/test.py
+++ b/tests/integration/test_mqvs_primary_key_cache/test.py
@@ -29,10 +29,10 @@ def test_primary_key_cache_enabled(started_cluster):
     time.sleep(2)
 
     instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("miss primary key cache")
+    assert instance.contains_in_log("Miss primary key cache")
 
     instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("hit primary key cache")
+    assert instance.contains_in_log("Hit primary key cache")
 
     instance.query("DROP TABLE IF EXISTS test_pk_cache")
 
diff --git a/tests/integration/test_mqvs_primary_key_cache_data_type/__init__.py b/tests/integration/test_mqvs_primary_key_cache_data_type/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/integration/test_mqvs_primary_key_cache_data_type/configs/config_information.xml b/tests/integration/test_mqvs_primary_key_cache_data_type/configs/config_information.xml
new file mode 100644
index 0000000000..323b272989
--- /dev/null
+++ b/tests/integration/test_mqvs_primary_key_cache_data_type/configs/config_information.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0"?>
+<clickhouse>
+    <logger>
+        <level>debug</level>
+        <log>/var/log/clickhouse-server/clickhouse-server.log</log>
+        <errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>
+        <size>1000M</size>
+        <count>10</count>
+    </logger>
+
+    <openSSL>
+        <client>
+            <cacheSessions>true</cacheSessions>
+            <verificationMode>none</verificationMode>
+            <invalidCertificateHandler>
+                <name>AcceptCertificateHandler</name>
+            </invalidCertificateHandler>
+        </client>
+    </openSSL>
+
+    <max_concurrent_queries>500</max_concurrent_queries>
+    <mark_cache_size>5368709120</mark_cache_size>
+    <users_config>users.xml</users_config>
+
+    <dictionaries_config>/etc/clickhouse-server/config.d/*.xml</dictionaries_config>
+</clickhouse>
\ No newline at end of file
diff --git a/tests/integration/test_mqvs_primary_key_cache_data_type/test.py b/tests/integration/test_mqvs_primary_key_cache_data_type/test.py
new file mode 100644
index 0000000000..b401988fd8
--- /dev/null
+++ b/tests/integration/test_mqvs_primary_key_cache_data_type/test.py
@@ -0,0 +1,355 @@
+import pytest
+import time
+from helpers.cluster import ClickHouseCluster
+
+cluster = ClickHouseCluster(__file__)
+instance = cluster.add_instance("instance", stay_alive=True, main_configs=["configs/config_information.xml"])
+
+
+@pytest.fixture(scope="module")
+def started_cluster():
+    try:
+        cluster.start()
+        yield cluster
+
+    finally:
+        cluster.shutdown()
+
+
+def test_primary_key_cache_uint16(started_cluster):
+    instance.query("DROP TABLE IF EXISTS test_pk_cache")
+    instance.query(
+        """
+        CREATE TABLE test_pk_cache(id UInt16, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
+        engine MergeTree primary key id
+        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
+        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
+        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
+        """)
+
+    time.sleep(2)
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Miss primary key cache")
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Hit primary key cache")
+
+
+def test_primary_key_cache_uint32(started_cluster):
+    instance.query("DROP TABLE IF EXISTS test_pk_cache")
+    instance.query(
+        """
+        CREATE TABLE test_pk_cache(id UInt32, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
+        engine MergeTree primary key id
+        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
+        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
+        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
+        """)
+
+    time.sleep(2)
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Miss primary key cache")
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Hit primary key cache")
+
+
+def test_primary_key_cache_uint64(started_cluster):
+    instance.query("DROP TABLE IF EXISTS test_pk_cache")
+    instance.query(
+        """
+        CREATE TABLE test_pk_cache(id UInt64, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
+        engine MergeTree primary key id
+        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
+        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
+        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
+        """)
+
+    time.sleep(2)
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Miss primary key cache")
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Hit primary key cache")
+
+
+def test_primary_key_cache_uint128(started_cluster):
+    instance.query("DROP TABLE IF EXISTS test_pk_cache")
+    instance.query(
+        """
+        CREATE TABLE test_pk_cache(id UInt128, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
+        engine MergeTree primary key id
+        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
+        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
+        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
+        """)
+
+    time.sleep(2)
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Miss primary key cache")
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Hit primary key cache")
+
+
+def test_primary_key_cache_uint256(started_cluster):
+    instance.query("DROP TABLE IF EXISTS test_pk_cache")
+    instance.query(
+        """
+        CREATE TABLE test_pk_cache(id UInt256, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
+        engine MergeTree primary key id
+        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
+        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
+        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
+        """)
+
+    time.sleep(2)
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Miss primary key cache")
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Hit primary key cache")
+
+
+def test_primary_key_cache_int16(started_cluster):
+    instance.query("DROP TABLE IF EXISTS test_pk_cache")
+    instance.query(
+        """
+        CREATE TABLE test_pk_cache(id Int16, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
+        engine MergeTree primary key id
+        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
+        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
+        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
+        """)
+
+    time.sleep(2)
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Miss primary key cache")
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Hit primary key cache")
+
+
+def test_primary_key_cache_int32(started_cluster):
+    instance.query("DROP TABLE IF EXISTS test_pk_cache")
+    instance.query(
+        """
+        CREATE TABLE test_pk_cache(id Int32, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
+        engine MergeTree primary key id
+        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
+        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
+        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
+        """)
+
+    time.sleep(2)
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Miss primary key cache")
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Hit primary key cache")
+
+
+def test_primary_key_cache_int64(started_cluster):
+    instance.query("DROP TABLE IF EXISTS test_pk_cache")
+    instance.query(
+        """
+        CREATE TABLE test_pk_cache(id Int64, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
+        engine MergeTree primary key id
+        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
+        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
+        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
+        """)
+
+    time.sleep(2)
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Miss primary key cache")
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Hit primary key cache")
+
+
+def test_primary_key_cache_int128(started_cluster):
+    instance.query("DROP TABLE IF EXISTS test_pk_cache")
+    instance.query(
+        """
+        CREATE TABLE test_pk_cache(id Int128, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
+        engine MergeTree primary key id
+        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
+        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
+        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
+        """)
+
+    time.sleep(2)
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Miss primary key cache")
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Hit primary key cache")
+
+
+def test_primary_key_cache_int256(started_cluster):
+    instance.query("DROP TABLE IF EXISTS test_pk_cache")
+    instance.query(
+        """
+        CREATE TABLE test_pk_cache(id Int256, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
+        engine MergeTree primary key id
+        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
+        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
+        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
+        """)
+
+    time.sleep(2)
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Miss primary key cache")
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Hit primary key cache")
+
+
+def test_primary_key_cache_float32(started_cluster):
+    instance.query("DROP TABLE IF EXISTS test_pk_cache")
+    instance.query(
+        """
+        CREATE TABLE test_pk_cache(id Float32, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
+        engine MergeTree primary key id
+        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
+        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
+        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
+        """)
+
+    time.sleep(2)
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Miss primary key cache")
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Hit primary key cache")
+
+
+def test_primary_key_cache_float64(started_cluster):
+    instance.query("DROP TABLE IF EXISTS test_pk_cache")
+    instance.query(
+        """
+        CREATE TABLE test_pk_cache(id Float64, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
+        engine MergeTree primary key id
+        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
+        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
+        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
+        """)
+
+    time.sleep(2)
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Miss primary key cache")
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Hit primary key cache")
+
+
+def test_primary_key_cache_date(started_cluster):
+    instance.query("DROP TABLE IF EXISTS test_pk_cache")
+    instance.query(
+        """
+        CREATE TABLE test_pk_cache(id Date, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
+        engine MergeTree primary key id
+        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
+        INSERT INTO test_pk_cache SELECT number + today(), [number, number, number] FROM numbers(2100);
+        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
+        """)
+
+    time.sleep(2)
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Miss primary key cache")
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Hit primary key cache")
+
+
+def test_primary_key_cache_date32(started_cluster):
+    instance.query("DROP TABLE IF EXISTS test_pk_cache")
+    instance.query(
+        """
+        CREATE TABLE test_pk_cache(id Date32, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
+        engine MergeTree primary key id
+        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
+        INSERT INTO test_pk_cache SELECT number + today(), [number, number, number] FROM numbers(2100);
+        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
+        """)
+
+    time.sleep(2)
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Miss primary key cache")
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Hit primary key cache")
+
+
+def test_primary_key_cache_datetime(started_cluster):
+    instance.query("DROP TABLE IF EXISTS test_pk_cache")
+    instance.query(
+        """
+        CREATE TABLE test_pk_cache(id DateTime, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
+        engine MergeTree primary key id
+        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
+        INSERT INTO test_pk_cache SELECT number + today(), [number, number, number] FROM numbers(2100);
+        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
+        """)
+
+    time.sleep(2)
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Miss primary key cache")
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Hit primary key cache")
+
+
+def test_primary_key_cache_datetime64(started_cluster):
+    instance.query("DROP TABLE IF EXISTS test_pk_cache")
+    instance.query(
+        """
+        CREATE TABLE test_pk_cache(id DateTime64, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
+        engine MergeTree primary key id
+        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
+        INSERT INTO test_pk_cache SELECT number + today(), [number, number, number] FROM numbers(2100);
+        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
+        """)
+
+    time.sleep(2)
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Miss primary key cache")
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Hit primary key cache")
+
+def test_primary_key_cache_enum(started_cluster):
+    instance.query("DROP TABLE IF EXISTS test_pk_cache")
+    instance.query(
+        """
+        CREATE TABLE test_pk_cache(id Enum8('a'=1, 'b'=2, 'c'=3, 'd'=4, 'f'=5, 'g'=6, 'h'=7, 'i'=8, 'j'=9, 'k'=10), vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
+        engine MergeTree primary key id
+        SETTINGS index_granularity=1, min_rows_to_build_vector_index=1, enable_primary_key_cache=true;
+        INSERT INTO test_pk_cache Values('a', [1, 1, 1]), ('b', [2, 2, 2]), ('c', [3, 3, 3]), ('d', [4, 4, 4]), ('f', [6, 6, 6]), ('g', [7, 7, 7]), ('h', [8, 8, 8]), ('i', [9, 9, 9]),('j', [5, 5, 5]),('k', [10, 10, 10]) ;
+        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
+        """)
+
+    time.sleep(2)
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Miss primary key cache")
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("Hit primary key cache")
-- 
2.32.1 (Apple Git-133)

