From fd9d8cf2abc66529417667e10f9399fae7916fab Mon Sep 17 00:00:00 2001
From: Xu Jing <xuj@moqi.ai>
Date: Tue, 14 Mar 2023 08:55:38 +0800
Subject: [PATCH 23/51] refine primary key cache integration test

---
 .../configs/config_information.xml            |  26 ++
 .../test_mqvs_primary_key_cache/test.py       |   2 +-
 .../test.py                                   | 278 ++----------------
 3 files changed, 48 insertions(+), 258 deletions(-)
 create mode 100644 tests/integration/test_mqvs_primary_key_cache/configs/config_information.xml

diff --git a/tests/integration/test_mqvs_primary_key_cache/configs/config_information.xml b/tests/integration/test_mqvs_primary_key_cache/configs/config_information.xml
new file mode 100644
index 0000000000..323b272989
--- /dev/null
+++ b/tests/integration/test_mqvs_primary_key_cache/configs/config_information.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0"?>
+<clickhouse>
+    <logger>
+        <level>debug</level>
+        <log>/var/log/clickhouse-server/clickhouse-server.log</log>
+        <errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>
+        <size>1000M</size>
+        <count>10</count>
+    </logger>
+
+    <openSSL>
+        <client>
+            <cacheSessions>true</cacheSessions>
+            <verificationMode>none</verificationMode>
+            <invalidCertificateHandler>
+                <name>AcceptCertificateHandler</name>
+            </invalidCertificateHandler>
+        </client>
+    </openSSL>
+
+    <max_concurrent_queries>500</max_concurrent_queries>
+    <mark_cache_size>5368709120</mark_cache_size>
+    <users_config>users.xml</users_config>
+
+    <dictionaries_config>/etc/clickhouse-server/config.d/*.xml</dictionaries_config>
+</clickhouse>
\ No newline at end of file
diff --git a/tests/integration/test_mqvs_primary_key_cache/test.py b/tests/integration/test_mqvs_primary_key_cache/test.py
index 4fc86b3c0d..6c447132be 100644
--- a/tests/integration/test_mqvs_primary_key_cache/test.py
+++ b/tests/integration/test_mqvs_primary_key_cache/test.py
@@ -3,7 +3,7 @@ import time
 from helpers.cluster import ClickHouseCluster
 
 cluster = ClickHouseCluster(__file__)
-instance = cluster.add_instance("instance", stay_alive=True)
+instance = cluster.add_instance("instance", stay_alive=True, main_configs=["configs/config_information.xml"])
 
 
 @pytest.fixture(scope="module")
diff --git a/tests/integration/test_mqvs_primary_key_cache_data_type/test.py b/tests/integration/test_mqvs_primary_key_cache_data_type/test.py
index b401988fd8..8b0123cb35 100644
--- a/tests/integration/test_mqvs_primary_key_cache_data_type/test.py
+++ b/tests/integration/test_mqvs_primary_key_cache_data_type/test.py
@@ -15,17 +15,16 @@ def started_cluster():
     finally:
         cluster.shutdown()
 
-
-def test_primary_key_cache_uint16(started_cluster):
+def primary_key_cache_test(data_type):
     instance.query("DROP TABLE IF EXISTS test_pk_cache")
     instance.query(
         """
-        CREATE TABLE test_pk_cache(id UInt16, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
+        CREATE TABLE test_pk_cache(id {}, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
         engine MergeTree primary key id
         SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
         INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
         ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
-        """)
+        """.format(data_type))
 
     time.sleep(2)
 
@@ -36,304 +35,69 @@ def test_primary_key_cache_uint16(started_cluster):
     assert instance.contains_in_log("Hit primary key cache")
 
 
-def test_primary_key_cache_uint32(started_cluster):
-    instance.query("DROP TABLE IF EXISTS test_pk_cache")
-    instance.query(
-        """
-        CREATE TABLE test_pk_cache(id UInt32, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
-        engine MergeTree primary key id
-        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
-        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
-        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
-        """)
-
-    time.sleep(2)
+def test_primary_key_cache_uint16(started_cluster):
+    primary_key_cache_test("UInt16")
 
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Miss primary key cache")
 
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Hit primary key cache")
+def test_primary_key_cache_uint32(started_cluster):
+    primary_key_cache_test("UInt32")
 
 
 def test_primary_key_cache_uint64(started_cluster):
-    instance.query("DROP TABLE IF EXISTS test_pk_cache")
-    instance.query(
-        """
-        CREATE TABLE test_pk_cache(id UInt64, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
-        engine MergeTree primary key id
-        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
-        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
-        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
-        """)
-
-    time.sleep(2)
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Miss primary key cache")
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Hit primary key cache")
+    primary_key_cache_test("UInt64")
 
 
 def test_primary_key_cache_uint128(started_cluster):
-    instance.query("DROP TABLE IF EXISTS test_pk_cache")
-    instance.query(
-        """
-        CREATE TABLE test_pk_cache(id UInt128, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
-        engine MergeTree primary key id
-        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
-        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
-        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
-        """)
-
-    time.sleep(2)
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Miss primary key cache")
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Hit primary key cache")
+    primary_key_cache_test("UInt128")
 
 
 def test_primary_key_cache_uint256(started_cluster):
-    instance.query("DROP TABLE IF EXISTS test_pk_cache")
-    instance.query(
-        """
-        CREATE TABLE test_pk_cache(id UInt256, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
-        engine MergeTree primary key id
-        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
-        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
-        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
-        """)
-
-    time.sleep(2)
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Miss primary key cache")
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Hit primary key cache")
+    primary_key_cache_test("UInt256")
 
 
 def test_primary_key_cache_int16(started_cluster):
-    instance.query("DROP TABLE IF EXISTS test_pk_cache")
-    instance.query(
-        """
-        CREATE TABLE test_pk_cache(id Int16, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
-        engine MergeTree primary key id
-        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
-        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
-        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
-        """)
-
-    time.sleep(2)
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Miss primary key cache")
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Hit primary key cache")
+    primary_key_cache_test("Int16")
 
 
 def test_primary_key_cache_int32(started_cluster):
-    instance.query("DROP TABLE IF EXISTS test_pk_cache")
-    instance.query(
-        """
-        CREATE TABLE test_pk_cache(id Int32, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
-        engine MergeTree primary key id
-        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
-        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
-        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
-        """)
-
-    time.sleep(2)
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Miss primary key cache")
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Hit primary key cache")
+    primary_key_cache_test("Int32")
 
 
 def test_primary_key_cache_int64(started_cluster):
-    instance.query("DROP TABLE IF EXISTS test_pk_cache")
-    instance.query(
-        """
-        CREATE TABLE test_pk_cache(id Int64, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
-        engine MergeTree primary key id
-        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
-        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
-        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
-        """)
-
-    time.sleep(2)
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Miss primary key cache")
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Hit primary key cache")
+    primary_key_cache_test("Int64")
 
 
 def test_primary_key_cache_int128(started_cluster):
-    instance.query("DROP TABLE IF EXISTS test_pk_cache")
-    instance.query(
-        """
-        CREATE TABLE test_pk_cache(id Int128, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
-        engine MergeTree primary key id
-        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
-        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
-        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
-        """)
-
-    time.sleep(2)
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Miss primary key cache")
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Hit primary key cache")
+    primary_key_cache_test("Int128")
 
 
 def test_primary_key_cache_int256(started_cluster):
-    instance.query("DROP TABLE IF EXISTS test_pk_cache")
-    instance.query(
-        """
-        CREATE TABLE test_pk_cache(id Int256, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
-        engine MergeTree primary key id
-        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
-        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
-        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
-        """)
-
-    time.sleep(2)
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Miss primary key cache")
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Hit primary key cache")
+    primary_key_cache_test("Int256")
 
 
 def test_primary_key_cache_float32(started_cluster):
-    instance.query("DROP TABLE IF EXISTS test_pk_cache")
-    instance.query(
-        """
-        CREATE TABLE test_pk_cache(id Float32, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
-        engine MergeTree primary key id
-        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
-        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
-        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
-        """)
-
-    time.sleep(2)
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Miss primary key cache")
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Hit primary key cache")
+    primary_key_cache_test("Float32")
 
 
 def test_primary_key_cache_float64(started_cluster):
-    instance.query("DROP TABLE IF EXISTS test_pk_cache")
-    instance.query(
-        """
-        CREATE TABLE test_pk_cache(id Float64, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
-        engine MergeTree primary key id
-        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
-        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
-        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
-        """)
-
-    time.sleep(2)
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Miss primary key cache")
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Hit primary key cache")
+    primary_key_cache_test("Float64")
 
 
 def test_primary_key_cache_date(started_cluster):
-    instance.query("DROP TABLE IF EXISTS test_pk_cache")
-    instance.query(
-        """
-        CREATE TABLE test_pk_cache(id Date, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
-        engine MergeTree primary key id
-        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
-        INSERT INTO test_pk_cache SELECT number + today(), [number, number, number] FROM numbers(2100);
-        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
-        """)
-
-    time.sleep(2)
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Miss primary key cache")
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Hit primary key cache")
+    primary_key_cache_test("Date")
 
 
 def test_primary_key_cache_date32(started_cluster):
-    instance.query("DROP TABLE IF EXISTS test_pk_cache")
-    instance.query(
-        """
-        CREATE TABLE test_pk_cache(id Date32, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
-        engine MergeTree primary key id
-        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
-        INSERT INTO test_pk_cache SELECT number + today(), [number, number, number] FROM numbers(2100);
-        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
-        """)
-
-    time.sleep(2)
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Miss primary key cache")
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Hit primary key cache")
+    primary_key_cache_test("Date32")
 
 
 def test_primary_key_cache_datetime(started_cluster):
-    instance.query("DROP TABLE IF EXISTS test_pk_cache")
-    instance.query(
-        """
-        CREATE TABLE test_pk_cache(id DateTime, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
-        engine MergeTree primary key id
-        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
-        INSERT INTO test_pk_cache SELECT number + today(), [number, number, number] FROM numbers(2100);
-        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
-        """)
-
-    time.sleep(2)
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Miss primary key cache")
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Hit primary key cache")
+    primary_key_cache_test("DateTime")
 
 
 def test_primary_key_cache_datetime64(started_cluster):
-    instance.query("DROP TABLE IF EXISTS test_pk_cache")
-    instance.query(
-        """
-        CREATE TABLE test_pk_cache(id DateTime64, vector Array(Float32), CONSTRAINT vector_len CHECK length(vector) = 3)
-        engine MergeTree primary key id
-        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
-        INSERT INTO test_pk_cache SELECT number + today(), [number, number, number] FROM numbers(2100);
-        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
-        """)
+    primary_key_cache_test("DateTime64")
 
-    time.sleep(2)
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Miss primary key cache")
-
-    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
-    assert instance.contains_in_log("Hit primary key cache")
 
 def test_primary_key_cache_enum(started_cluster):
     instance.query("DROP TABLE IF EXISTS test_pk_cache")
-- 
2.32.1 (Apple Git-133)

