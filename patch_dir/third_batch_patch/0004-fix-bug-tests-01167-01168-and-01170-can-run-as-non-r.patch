From 1a272c03559dd3a766fd6ab3bfaadcb6d781b6f1 Mon Sep 17 00:00:00 2001
From: lvzheng <zhengl@moqi.ai>
Date: Fri, 25 Nov 2022 18:15:37 +0800
Subject: [PATCH 04/51] fix bug: tests 01167, 01168 and 01170 can run as
 non-root user.

---
 src/Storages/MergeTree/MergeTreeData.cpp |  2 +-
 src/Storages/MergeTree/localBackup.cpp   | 11 ++++++-----
 src/Storages/MergeTree/localBackup.h     |  2 +-
 3 files changed, 8 insertions(+), 7 deletions(-)

diff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp
index 23b12dc6d9..8551cb26cf 100644
--- a/src/Storages/MergeTree/MergeTreeData.cpp
+++ b/src/Storages/MergeTree/MergeTreeData.cpp
@@ -5685,7 +5685,7 @@ MergeTreeData::MutableDataPartPtr MergeTreeData::cloneAndLoadDataPartOnSameDisk(
     }
 
     LOG_DEBUG(log, "Cloning part {} to {}", fullPath(disk, src_part_path), fullPath(disk, dst_part_path));
-    localBackup(disk, src_part_path, dst_part_path);
+    localBackup(disk, src_part_path, dst_part_path, /* make_source_readonly */ false);
     disk->removeFileIfExists(fs::path(dst_part_path) / IMergeTreeDataPart::DELETE_ON_DESTROY_MARKER_FILE_NAME);
     disk->removeFileIfExists(fs::path(dst_part_path) / IMergeTreeDataPart::TXN_VERSION_METADATA_FILE_NAME);
 
diff --git a/src/Storages/MergeTree/localBackup.cpp b/src/Storages/MergeTree/localBackup.cpp
index 1a04aa4b67..8bb3e4cf78 100644
--- a/src/Storages/MergeTree/localBackup.cpp
+++ b/src/Storages/MergeTree/localBackup.cpp
@@ -14,7 +14,7 @@ namespace ErrorCodes
 }
 
 
-static void localBackupImpl(const DiskPtr & disk, const String & source_path, const String & destination_path, size_t level,
+static void localBackupImpl(const DiskPtr & disk, const String & source_path, const String & destination_path, bool make_source_readonly, size_t level,
                             std::optional<size_t> max_level)
 {
     if (max_level && level > *max_level)
@@ -32,12 +32,13 @@ static void localBackupImpl(const DiskPtr & disk, const String & source_path, co
 
         if (!disk->isDirectory(source))
         {
-            disk->setReadOnly(source);
+            if (make_source_readonly)
+                disk->setReadOnly(source);
             disk->createHardLink(source, destination);
         }
         else
         {
-            localBackupImpl(disk, source, destination, level + 1, max_level);
+            localBackupImpl(disk, source, destination, make_source_readonly, level + 1, max_level);
         }
     }
 }
@@ -80,7 +81,7 @@ private:
 };
 }
 
-void localBackup(const DiskPtr & disk, const String & source_path, const String & destination_path, std::optional<size_t> max_level)
+void localBackup(const DiskPtr & disk, const String & source_path, const String & destination_path, bool make_source_readonly, std::optional<size_t> max_level)
 {
     if (disk->exists(destination_path) && !disk->isDirectoryEmpty(destination_path))
     {
@@ -100,7 +101,7 @@ void localBackup(const DiskPtr & disk, const String & source_path, const String
     {
         try
         {
-            localBackupImpl(disk, source_path, destination_path, 0, max_level);
+            localBackupImpl(disk, source_path, destination_path, make_source_readonly, 0, max_level);
         }
         catch (const DB::ErrnoException & e)
         {
diff --git a/src/Storages/MergeTree/localBackup.h b/src/Storages/MergeTree/localBackup.h
index 066ba8f748..c6a4662044 100644
--- a/src/Storages/MergeTree/localBackup.h
+++ b/src/Storages/MergeTree/localBackup.h
@@ -20,6 +20,6 @@ namespace DB
   *  If max_level is specified, than only files which depth relative source_path less or equal max_level will be copied.
   *  So, if max_level=0 than only direct file child are copied.
   */
-void localBackup(const DiskPtr & disk, const String & source_path, const String & destination_path, std::optional<size_t> max_level = {});
+void localBackup(const DiskPtr & disk, const String & source_path, const String & destination_path, bool make_source_readonly = true, std::optional<size_t> max_level = {});
 
 }
-- 
2.32.1 (Apple Git-133)

