From d81966160639f373367605b3773f31eb319ebca8 Mon Sep 17 00:00:00 2001
From: Jianmei Zhang <jianmeiz@moqi.ai>
Date: Thu, 9 Mar 2023 05:39:24 +0000
Subject: [PATCH 21/51] Add optimize_move_to_prewhere_for_vector_search setting
 for vector search

---
 src/Core/Settings.h                           |  1 +
 .../MergeTree/MergeTreeWhereOptimizer.cpp     | 38 ++++++++------
 .../MergeTree/MergeTreeWhereOptimizer.h       |  1 +
 ...vs_no_threshold_move_to_prewhere.reference | 51 +++++++++++++++++++
 ...024_mqvs_no_threshold_move_to_prewhere.sql | 50 ++++++++++++++++++
 5 files changed, 126 insertions(+), 15 deletions(-)
 create mode 100644 tests/queries/2_vector_search/00024_mqvs_no_threshold_move_to_prewhere.reference
 create mode 100644 tests/queries/2_vector_search/00024_mqvs_no_threshold_move_to_prewhere.sql

diff --git a/src/Core/Settings.h b/src/Core/Settings.h
index b646d28e2f..2041863e7c 100644
--- a/src/Core/Settings.h
+++ b/src/Core/Settings.h
@@ -173,6 +173,7 @@ class IColumn;
     M(UInt64, min_build_index_train_block_size, 100 * 1024 * 1024, "Minimum block size in bytes for training in build index", 0) \
     M(UInt64, max_build_index_add_block_size, 10 * 1024 * 1024, "Maximum block size in bytes for adding vectors in one round of build index", 0) \
     M(UInt64, serialized_index_segment_max_byte, 50000000, "Segment size in bytes for vector index serialization", 0) \
+    M(Bool, optimize_move_to_prewhere_for_vector_search, true, "Enables or disables special PREWHERE optimization for vector search in SELECT queries which move all viable WHERE to PREWHERE.", 0) \
     M(UInt64, background_schedule_pool_size, 128, "Number of threads performing background tasks for replicated tables, dns cache updates. Only has meaning at server startup.", 0) \
     M(UInt64, background_message_broker_schedule_pool_size, 16, "Number of threads performing background tasks for message streaming. Only has meaning at server startup.", 0) \
     M(UInt64, background_distributed_schedule_pool_size, 16, "Number of threads performing background tasks for distributed sends. Only has meaning at server startup.", 0) \
diff --git a/src/Storages/MergeTree/MergeTreeWhereOptimizer.cpp b/src/Storages/MergeTree/MergeTreeWhereOptimizer.cpp
index c33dece69e..6e6ce865e8 100644
--- a/src/Storages/MergeTree/MergeTreeWhereOptimizer.cpp
+++ b/src/Storages/MergeTree/MergeTreeWhereOptimizer.cpp
@@ -6,6 +6,7 @@
 #include <Storages/MergeTree/MergeTreeData.h>
 #include <Storages/MergeTree/KeyCondition.h>
 #include <Interpreters/IdentifierSemantic.h>
+#include <Interpreters/TreeRewriter.h>
 #include <Parsers/ASTSelectQuery.h>
 #include <Parsers/ASTFunction.h>
 #include <Parsers/ASTIdentifier.h>
@@ -58,6 +59,10 @@ MergeTreeWhereOptimizer::MergeTreeWhereOptimizer(
             total_size_of_queried_columns += it->second;
     }
 
+    /// Move as much as possible where conditions to prewhere for vector search
+    if (query_info.syntax_analyzer_result && !query_info.syntax_analyzer_result->vector_scan_funcs.empty())
+        has_vector_func = context->getSettingsRef().optimize_move_to_prewhere_for_vector_search;
+
     determineArrayJoinedNames(query_info.query->as<ASTSelectQuery &>());
     optimize(query_info.query->as<ASTSelectQuery &>());
 }
@@ -311,23 +316,26 @@ void MergeTreeWhereOptimizer::optimize(ASTSelectQuery & select) const
         if (!it->viable)
             break;
 
-        bool moved_enough = false;
-        if (total_size_of_queried_columns > 0)
-        {
-            /// If we know size of queried columns use it as threshold. 10% ratio is just a guess.
-            moved_enough = total_size_of_moved_conditions > 0
-                && (total_size_of_moved_conditions + it->columns_size) * 10 > total_size_of_queried_columns;
-        }
-        else
+        if (!has_vector_func)
         {
-            /// Otherwise, use number of moved columns as a fallback.
-            /// It can happen, if table has only compact parts. 25% ratio is just a guess.
-            moved_enough = total_number_of_moved_columns > 0
-                && (total_number_of_moved_columns + it->identifiers.size()) * 4 > queried_columns.size();
-        }
+            bool moved_enough = false;
+            if (total_size_of_queried_columns > 0)
+            {
+                /// If we know size of queried columns use it as threshold. 10% ratio is just a guess.
+                moved_enough = total_size_of_moved_conditions > 0
+                    && (total_size_of_moved_conditions + it->columns_size) * 10 > total_size_of_queried_columns;
+            }
+            else
+            {
+                /// Otherwise, use number of moved columns as a fallback.
+                /// It can happen, if table has only compact parts. 25% ratio is just a guess.
+                moved_enough = total_number_of_moved_columns > 0
+                    && (total_number_of_moved_columns + it->identifiers.size()) * 4 > queried_columns.size();
+            }
 
-        if (moved_enough)
-            break;
+            if (moved_enough)
+                break;
+        }
 
         move_condition(it);
     }
diff --git a/src/Storages/MergeTree/MergeTreeWhereOptimizer.h b/src/Storages/MergeTree/MergeTreeWhereOptimizer.h
index fa14fea94d..21ebea31cf 100644
--- a/src/Storages/MergeTree/MergeTreeWhereOptimizer.h
+++ b/src/Storages/MergeTree/MergeTreeWhereOptimizer.h
@@ -114,6 +114,7 @@ private:
     std::unordered_map<std::string, UInt64> column_sizes;
     UInt64 total_size_of_queried_columns = 0;
     NameSet array_joined_names;
+    bool has_vector_func = false;
 };
 
 
diff --git a/tests/queries/2_vector_search/00024_mqvs_no_threshold_move_to_prewhere.reference b/tests/queries/2_vector_search/00024_mqvs_no_threshold_move_to_prewhere.reference
new file mode 100644
index 0000000000..516e8016c9
--- /dev/null
+++ b/tests/queries/2_vector_search/00024_mqvs_no_threshold_move_to_prewhere.reference
@@ -0,0 +1,51 @@
+0
+explain syntax for sql w/o vector search
+SELECT id
+FROM test_vector
+PREWHERE toYear(date) >= 2000
+WHERE (toYear(date) >= 2000) AND (label = \'animal\')
+explain syntax for sql with vector search
+SELECT
+    id,
+    date,
+    label,
+    distance(\'topK=10\')(data, [0, 1., 2.]) AS dist
+FROM test_vector
+PREWHERE (toYear(date) >= 2000) AND (label = \'animal\')
+ORDER BY distance_func ASC
+LIMIT 10
+1001	2022-12-29	animal	2
+1000	2022-12-29	animal	5
+1002	2022-12-29	animal	5
+1003	2022-12-29	animal	14
+1004	2022-12-29	animal	29
+1005	2022-12-29	animal	50
+1006	2022-12-29	animal	77
+1007	2022-12-29	animal	110
+1008	2022-12-29	animal	149
+1009	2022-12-29	animal	194
+explain syntax for sql with vector search and dist in where conditions
+SELECT
+    id,
+    date,
+    label,
+    distance(\'topK=10\')(data, [0, 1., 2.]) AS dist
+FROM test_vector
+PREWHERE (toYear(date) >= 2000) AND (label = \'animal\')
+WHERE ((toYear(date) >= 2000) AND (label = \'animal\')) AND (dist < 10)
+ORDER BY distance_func ASC
+LIMIT 10
+1001	2022-12-29	animal	2
+1000	2022-12-29	animal	5
+1002	2022-12-29	animal	5
+set optimize_move_to_prewhere_for_vector_search = 0
+SELECT
+    id,
+    date,
+    label,
+    distance(\'topK=10\')(data, [0, 1., 2.]) AS dist
+FROM test_vector
+PREWHERE toYear(date) >= 2000
+WHERE (toYear(date) >= 2000) AND (label = \'animal\')
+ORDER BY distance_func ASC
+LIMIT 10
diff --git a/tests/queries/2_vector_search/00024_mqvs_no_threshold_move_to_prewhere.sql b/tests/queries/2_vector_search/00024_mqvs_no_threshold_move_to_prewhere.sql
new file mode 100644
index 0000000000..1a9607e400
--- /dev/null
+++ b/tests/queries/2_vector_search/00024_mqvs_no_threshold_move_to_prewhere.sql
@@ -0,0 +1,50 @@
+
+-- Tags: no-parallel
+
+DROP TABLE IF EXISTS test_vector;
+CREATE TABLE test_vector
+(
+    id    UInt32,
+    data  Array(Float32),
+    date  Date,
+    label Enum8('person' = 1, 'building' = 2, 'animal' = 3),
+    CONSTRAINT check_length CHECK length(data) = 3
+)
+engine = MergeTree PRIMARY KEY id;
+
+INSERT INTO test_vector SELECT number, [number,number,number], '2022-12-30', 'person' FROM numbers(1000);
+INSERT INTO test_vector SELECT number+1000, [number,number,number], '2022-12-29', 'animal' FROM numbers(1000);
+INSERT INTO test_vector SELECT number+2000, [number,number,number], '2022-12-28', 'building' FROM numbers(1000);
+
+ALTER TABLE test_vector ADD VECTOR INDEX vector_idx data TYPE IVFFLAT;
+
+SELECT sleep(2);
+
+SELECT 'explain syntax for sql w/o vector search';
+EXPLAIN SYNTAX SELECT id FROM test_vector WHERE toYear(date) >= 2000 AND label = 'animal';
+
+SELECT 'explain syntax for sql with vector search';
+EXPLAIN SYNTAX SELECT id, date, label, distance('topK=10')(data, [0,1.0,2.0]) as dist
+FROM test_vector
+WHERE toYear(date) >= 2000 AND label = 'animal';
+
+SELECT id, date, label, distance('topK=10')(data, [0,1.0,2.0]) as dist
+FROM test_vector
+WHERE toYear(date) >= 2000 AND label = 'animal';
+
+SELECT 'explain syntax for sql with vector search and dist in where conditions';
+EXPLAIN SYNTAX SELECT id, date, label, distance('topK=10')(data, [0,1.0,2.0]) as dist
+FROM test_vector
+WHERE toYear(date) >= 2000 AND label = 'animal' AND dist < 10;
+
+SELECT id, date, label, distance('topK=10')(data, [0,1.0,2.0]) as dist
+FROM test_vector
+WHERE toYear(date) >= 2000 AND label = 'animal' AND dist < 10;
+
+SELECT 'set optimize_move_to_prewhere_for_vector_search = 0';
+SET optimize_move_to_prewhere_for_vector_search=0;
+EXPLAIN SYNTAX SELECT id, date, label, distance('topK=10')(data, [0,1.0,2.0]) as dist
+FROM test_vector
+WHERE toYear(date) >= 2000 AND label = 'animal';
+
+DROP TABLE test_vector;
\ No newline at end of file
-- 
2.32.1 (Apple Git-133)

