From 6bae254888e1b0fff1cd2058f8cac3efbe0ad348 Mon Sep 17 00:00:00 2001
From: Jianmei Zhang <jianmeiz@moqi.ai>
Date: Tue, 31 Jan 2023 14:54:07 +0800
Subject: [PATCH 17/85] Add 2 integration tests, refactor ignore vector column
 in vector scan function, add remove logic for primary key cache

---
 programs/server/config.xml                    |  7 +-
 src/Interpreters/ExpressionAnalyzer.cpp       |  2 +-
 .../RequiredSourceColumnsVisitor.cpp          |  4 +-
 src/Storages/MergeTree/MergeTreeData.cpp      | 19 +++++
 src/Storages/MergeTree/MergeTreeData.h        |  1 +
 .../MergeTree/PrimaryKeyCacheManager.cpp      | 18 +++--
 .../MergeTree/PrimaryKeyCacheManager.h        |  6 +-
 src/Storages/StorageMergeTree.cpp             |  3 +
 .../__init__.py                               |  0
 .../test.py                                   | 70 +++++++++++++++++++
 .../test_mqvs_primary_key_cache/__init__.py   |  0
 .../test_mqvs_primary_key_cache/test.py       | 55 +++++++++++++++
 .../00007_mqvs_wrong_search_col.sh            |  4 +-
 ...1_mqvs_support_primary_key_cache.reference | 20 +++---
 .../00021_mqvs_support_primary_key_cache.sql  |  6 +-
 15 files changed, 186 insertions(+), 29 deletions(-)
 create mode 100644 tests/integration/test_mqvs_cancel_building_vector_index/__init__.py
 create mode 100644 tests/integration/test_mqvs_cancel_building_vector_index/test.py
 create mode 100644 tests/integration/test_mqvs_primary_key_cache/__init__.py
 create mode 100644 tests/integration/test_mqvs_primary_key_cache/test.py

diff --git a/programs/server/config.xml b/programs/server/config.xml
index f6580f4f15..6ca64dc30c 100644
--- a/programs/server/config.xml
+++ b/programs/server/config.xml
@@ -1144,14 +1144,11 @@
     </distributed_ddl>
 
     <!-- Settings to fine tune MergeTree tables. See documentation in source code, in MergeTreeSettings.h -->
-
+    <!--
     <merge_tree>
-        <!--
         <max_suspicious_broken_parts>5</max_suspicious_broken_parts>
-        -->
-        <enable_primary_key_cache>true</enable_primary_key_cache>
     </merge_tree>
-
+    -->
 
     <!-- Protection from accidental DROP.
          If size of a MergeTree table is greater than max_table_size_to_drop (in bytes) than table could not be dropped with any DROP query.
diff --git a/src/Interpreters/ExpressionAnalyzer.cpp b/src/Interpreters/ExpressionAnalyzer.cpp
index a2853dcf65..1b24ee8e94 100644
--- a/src/Interpreters/ExpressionAnalyzer.cpp
+++ b/src/Interpreters/ExpressionAnalyzer.cpp
@@ -635,7 +635,7 @@ bool ExpressionAnalyzer::makeVectorScanDescriptions(ActionsDAGPtr & actions)
         else
         {
             LOG_DEBUG(log, "search column name: {}, type not exist", vector_scan_desc.search_column_name);
-            throw Exception(ErrorCodes::BAD_ARGUMENTS, "wrong search column name");
+            throw Exception(ErrorCodes::BAD_ARGUMENTS, "wrong search column name '{}'", vector_scan_desc.search_column_name);
         }
 
         const DataTypeArray * array_type = checkAndGetDataType<DataTypeArray>((*search_column_type).type.get());
diff --git a/src/Interpreters/RequiredSourceColumnsVisitor.cpp b/src/Interpreters/RequiredSourceColumnsVisitor.cpp
index 54039997e1..9ad476de60 100644
--- a/src/Interpreters/RequiredSourceColumnsVisitor.cpp
+++ b/src/Interpreters/RequiredSourceColumnsVisitor.cpp
@@ -1,5 +1,6 @@
 #include <Interpreters/RequiredSourceColumnsVisitor.h>
 #include <Common/typeid_cast.h>
+#include <Common/VectorScanUtils.h>
 #include <Core/Names.h>
 #include <Parsers/IAST.h>
 #include <Parsers/ASTIdentifier.h>
@@ -56,7 +57,8 @@ bool RequiredSourceColumnsMatcher::needChildVisit(const ASTPtr & node, const AST
         /// "indexHint" is a special function for index analysis.
         /// Everything that is inside it is not calculated. See KeyCondition
         /// "lambda" visit children itself.
-        if (f->name == "indexHint" || f->name == "lambda")
+        /// Children inside vector scan function will be checked later in ExpressionAnalyzer.
+        if (f->name == "indexHint" || f->name == "lambda" || isVectorScanFunc(f->name))
             return false;
     }
 
diff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp
index f80ac646e3..d1e9a66a58 100644
--- a/src/Storages/MergeTree/MergeTreeData.cpp
+++ b/src/Storages/MergeTree/MergeTreeData.cpp
@@ -56,6 +56,7 @@
 #include <Storages/MergeTree/MergedColumnOnlyOutputStream.h>
 #include <Storages/MergeTree/checkDataPart.h>
 #include <Storages/MergeTree/localBackup.h>
+#include <Storages/MergeTree/PrimaryKeyCacheManager.h>
 #include <Storages/StorageMergeTree.h>
 #include <Storages/StorageReplicatedMergeTree.h>
 #include <Storages/VirtualColumnUtils.h>
@@ -1682,6 +1683,22 @@ void MergeTreeData::clearCachedVectorIndex(const DataPartsVector & parts)
     }
 }
 
+void MergeTreeData::clearPrimaryKeyCache(const DataPartsVector & parts)
+{
+    if (!getSettings()->enable_primary_key_cache)
+        return;
+
+    for (const auto & part : parts)
+    {
+        /// Temporary part does not present in primary key cache
+        if (part->getState() == DataPartState::Temporary)
+            continue;
+
+        const String cache_key = part->getFullRelativePath() + ":" + part->name;
+        PrimaryKeyCacheManager::getMgr().removeFromPKCache(cache_key);
+    }
+}
+
 void MergeTreeData::regularClearCachedIndex(const DataPartsVector & parts)
 {
 //    StorageMetadataPtr meta_snapshot = getInMemoryMetadataPtr();
@@ -1705,6 +1722,8 @@ void MergeTreeData::clearPartsFromFilesystem(const DataPartsVector & parts_to_re
 {
     /// The old part's vector index is reused by new part, no need to clear cache.
     /// clearCachedVectorIndex(parts_to_remove);
+    clearPrimaryKeyCache(parts_to_remove);
+
     const auto settings = getSettings();
     if (parts_to_remove.size() > 1 && settings->max_part_removal_threads > 1 && parts_to_remove.size() > settings->concurrent_part_removal_threshold)
     {
diff --git a/src/Storages/MergeTree/MergeTreeData.h b/src/Storages/MergeTree/MergeTreeData.h
index 3710c96fec..1bafcdb994 100644
--- a/src/Storages/MergeTree/MergeTreeData.h
+++ b/src/Storages/MergeTree/MergeTreeData.h
@@ -589,6 +589,7 @@ public:
     size_t clearOldPartsFromFilesystem(bool force = false);
     void clearPartsFromFilesystem(const DataPartsVector & parts);
     void clearCachedVectorIndex(const DataPartsVector & parts);
+    void clearPrimaryKeyCache(const DataPartsVector & parts);
 
     ///this one checks cached vector index list every 10s and drop all that's removed in metadata.
     void regularClearCachedIndex(const DataPartsVector & parts);
diff --git a/src/Storages/MergeTree/PrimaryKeyCacheManager.cpp b/src/Storages/MergeTree/PrimaryKeyCacheManager.cpp
index e41466b18f..d034f1a65c 100644
--- a/src/Storages/MergeTree/PrimaryKeyCacheManager.cpp
+++ b/src/Storages/MergeTree/PrimaryKeyCacheManager.cpp
@@ -8,29 +8,37 @@ namespace DB
 
 
 PrimaryKeyCacheManager::PrimaryKeyCacheManager(size_t max_size)
-: cache_ex(max_size)
+: cache_ex(max_size), log(&Poco::Logger::get("PrimaryKeyCacheManager"))
 {
 }
 
 
-void PrimaryKeyCacheManager::setPartPkCache(String part_name, Columns columns)
+void PrimaryKeyCacheManager::setPartPkCache(String cache_key, Columns columns)
 {
+    LOG_INFO(log, "PrimaryKeyCache put cache_key={}", cache_key);
+
     /// type of clickhouse LRUCache's value must be std::shard_ptr
     std::shared_ptr<Columns> cols_ptr = std::make_shared<Columns>(columns);
 
-    cache_ex.set(part_name, cols_ptr);
+    cache_ex.set(cache_key, cols_ptr);
 }
 
 
-std::optional<Columns> PrimaryKeyCacheManager::getPartPkCache(String part_name)
+std::optional<Columns> PrimaryKeyCacheManager::getPartPkCache(String cache_key)
 {
-    std::shared_ptr<Columns> pk_cache = cache_ex.get(part_name);
+    std::shared_ptr<Columns> pk_cache = cache_ex.get(cache_key);
     if (!pk_cache)
         return std::nullopt;
 
     return *pk_cache;
 }
 
+void PrimaryKeyCacheManager::removeFromPKCache(const String & cache_key)
+{
+    LOG_INFO(log, "PrimaryKeyCache remove cache_key={}", cache_key);
+    return cache_ex.remove(cache_key);
+}
+
 
 bool PrimaryKeyCacheManager::isSupportedPrimaryKey(const KeyDescription & primary_key)
 {
diff --git a/src/Storages/MergeTree/PrimaryKeyCacheManager.h b/src/Storages/MergeTree/PrimaryKeyCacheManager.h
index 2550abba3e..859f9f21f0 100644
--- a/src/Storages/MergeTree/PrimaryKeyCacheManager.h
+++ b/src/Storages/MergeTree/PrimaryKeyCacheManager.h
@@ -31,8 +31,9 @@ public:
 class PrimaryKeyCacheManager
 {
 public:
-    void setPartPkCache(String part_name, Columns columns);
-    std::optional<Columns> getPartPkCache(String part_name);
+    void setPartPkCache(String cache_key, Columns columns);
+    std::optional<Columns> getPartPkCache(String cache_key);
+    void removeFromPKCache(const String & cache_key);
 
     /// tools
     static bool isSupportedPrimaryKey(const KeyDescription & kd);
@@ -40,6 +41,7 @@ public:
 
 private:
     LRUCache<String, Columns, std::hash<String>, ColumnsWeightFunc> cache_ex;
+    Poco::Logger * log;
 
     explicit PrimaryKeyCacheManager(size_t max_size);
     ~PrimaryKeyCacheManager() = default;
diff --git a/src/Storages/StorageMergeTree.cpp b/src/Storages/StorageMergeTree.cpp
index cf0aae010c..f39a203c7a 100644
--- a/src/Storages/StorageMergeTree.cpp
+++ b/src/Storages/StorageMergeTree.cpp
@@ -193,6 +193,9 @@ void StorageMergeTree::shutdown()
 
         /// Clear cached vector index
         clearCachedVectorIndex(getDataPartsVector());
+
+        /// Clear primary key cache if exists.
+        clearPrimaryKeyCache(getDataPartsVector());
     }
     catch (...)
     {
diff --git a/tests/integration/test_mqvs_cancel_building_vector_index/__init__.py b/tests/integration/test_mqvs_cancel_building_vector_index/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/integration/test_mqvs_cancel_building_vector_index/test.py b/tests/integration/test_mqvs_cancel_building_vector_index/test.py
new file mode 100644
index 0000000000..1dc1809a7f
--- /dev/null
+++ b/tests/integration/test_mqvs_cancel_building_vector_index/test.py
@@ -0,0 +1,70 @@
+import pytest
+import time
+from helpers.cluster import ClickHouseCluster
+
+cluster = ClickHouseCluster(__file__)
+instance = cluster.add_instance("instance", stay_alive=True)
+
+
+@pytest.fixture(scope="module")
+def started_cluster():
+    try:
+        cluster.start()
+        yield cluster
+
+    finally:
+        cluster.shutdown()
+
+
+def test_drop_index_cancel_building_index(started_cluster):
+    instance.query(
+        """
+    CREATE TABLE test_drop_index(id UInt32, text String, vector FixedArray(Float32, 768)) Engine MergeTree ORDER BY id;
+    INSERT INTO test_drop_index SELECT number, randomPrintableASCII(80), range(768) FROM numbers(50000);
+    optimize table test_drop_index final;
+    ALTER TABLE test_drop_index ADD VECTOR INDEX v1 vector TYPE HNSWSQ;
+    """
+    )
+
+    time.sleep(1)
+
+    instance.query("ALTER TABLE test_drop_index DROP VECTOR INDEX v1")
+
+    instance.wait_for_log_line("Vector index has been dropped")
+    assert instance.contains_in_log("Vector index has been dropped")
+
+    instance.query("DROP TABLE IF EXISTS test_drop_index")
+
+
+def test_drop_table_cancel_building_index(started_cluster):
+    instance.query(
+        """
+    CREATE TABLE test_drop_table(id UInt32, text String, vector FixedArray(Float32, 768)) Engine MergeTree ORDER BY id;
+    INSERT INTO test_drop_table SELECT number, randomPrintableASCII(80), range(768) FROM numbers(50000);
+    optimize table test_drop_table final;
+    ALTER TABLE test_drop_table ADD VECTOR INDEX v1 vector TYPE HNSWSQ;
+    """
+    )
+
+    time.sleep(1)
+
+    instance.query("DROP TABLE test_drop_table SYNC")
+
+    assert instance.contains_in_log("Cancelled building vector index")
+
+
+def test_drop_table_release_index_cache(started_cluster):
+    instance.query(
+        """
+    CREATE TABLE test_drop_table_release_cache(id UInt32, text String, vector FixedArray(Float32, 3)) Engine MergeTree ORDER BY id;
+    INSERT INTO test_drop_table_release_cache SELECT number, randomPrintableASCII(80), range(3) FROM numbers(1000);
+    ALTER TABLE test_drop_table_release_cache ADD VECTOR INDEX v1 vector TYPE HNSWSQ;
+    """
+    )
+
+    instance.wait_for_log_line("index build complete")
+
+    assert instance.query("select status from system.vector_indices where database = currentDatabase() and table = 'test_drop_table_release_cache'") == "Built\n"
+    instance.query("DROP TABLE test_drop_table_release_cache SYNC")
+
+    assert instance.contains_in_log("num of cache items after forceExpire 0")
diff --git a/tests/integration/test_mqvs_primary_key_cache/__init__.py b/tests/integration/test_mqvs_primary_key_cache/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/integration/test_mqvs_primary_key_cache/test.py b/tests/integration/test_mqvs_primary_key_cache/test.py
new file mode 100644
index 0000000000..ae67880b40
--- /dev/null
+++ b/tests/integration/test_mqvs_primary_key_cache/test.py
@@ -0,0 +1,55 @@
+import pytest
+import time
+from helpers.cluster import ClickHouseCluster
+
+cluster = ClickHouseCluster(__file__)
+instance = cluster.add_instance("instance", stay_alive=True)
+
+
+@pytest.fixture(scope="module")
+def started_cluster():
+    try:
+        cluster.start()
+        yield cluster
+
+    finally:
+        cluster.shutdown()
+
+
+def test_primary_key_cache_enabled(started_cluster):
+    instance.query(
+        """
+        CREATE TABLE test_pk_cache(id UInt32, vector FixedArray(Float32, 3))
+        engine MergeTree primary key id
+        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
+        INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
+        ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
+        """)
+
+    time.sleep(2)
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("miss primary key cache")
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache")
+    assert instance.contains_in_log("hit primary key cache")
+
+    instance.query("DROP TABLE IF EXISTS test_pk_cache")
+
+
+def test_primary_key_cache_disabled(started_cluster):
+    instance.query(
+        """
+        CREATE TABLE test_pk_cache_disable(id UInt32, vector FixedArray(Float32, 3))
+        engine MergeTree primary key id
+        SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=false;
+        INSERT INTO test_pk_cache_disable SELECT number, [number, number, number] FROM numbers(2100);
+        ALTER TABLE test_pk_cache_disable ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
+        """)
+
+    time.sleep(2)
+
+    instance.query("SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache_disable")
+    assert instance.contains_in_log("enable_primary_key_cache = false")
+
+    instance.query("DROP TABLE IF EXISTS test_pk_cache_disable")
diff --git a/tests/queries/2_vector_search/00007_mqvs_wrong_search_col.sh b/tests/queries/2_vector_search/00007_mqvs_wrong_search_col.sh
index 3fa993ed6f..9bf863e2f6 100755
--- a/tests/queries/2_vector_search/00007_mqvs_wrong_search_col.sh
+++ b/tests/queries/2_vector_search/00007_mqvs_wrong_search_col.sh
@@ -3,5 +3,5 @@
 
 clickhouse-client -q "DROP TABLE IF EXISTS test_vector"
 clickhouse-client -q "CREATE TABLE test_vector(id Float32, vector FixedArray(Float32, 3)) engine MergeTree primary key id"
-clickhouse-client -q "SELECT id, distance('topK=10')(vectore, [0.1, 0.1, 0.1]) FROM test_vector;" 2>&1 | grep -q "DB::Exception: Missing columns: 'vectore'" && echo 'OK' || echo 'FAIL' || :
-clickhouse-client -q "SELECT [1.0, 1.1, 2.0], distance('topK=10')(vector, [0.1, 0.1, 0.1]), number FROM ( SELECT number FROM system.numbers LIMIT 100)" 2>&1 | grep -q "DB::Exception: Missing columns: 'vector'" && echo 'OK' || echo 'FAIL' || :
+clickhouse-client -q "SELECT id, distance('topK=10')(vectore, [0.1, 0.1, 0.1]) FROM test_vector;" 2>&1 | grep -q "DB::Exception: wrong search column name 'vectore'." && echo 'OK' || echo 'FAIL' || :
+clickhouse-client -q "SELECT [1.0, 1.1, 2.0], distance('topK=10')(vector, [0.1, 0.1, 0.1]), number FROM ( SELECT number FROM system.numbers LIMIT 100)" 2>&1 | grep -q "DB::Exception: wrong search column name 'vector'." && echo 'OK' || echo 'FAIL' || :
diff --git a/tests/queries/2_vector_search/00021_mqvs_support_primary_key_cache.reference b/tests/queries/2_vector_search/00021_mqvs_support_primary_key_cache.reference
index e51c223f07..05d2470141 100644
--- a/tests/queries/2_vector_search/00021_mqvs_support_primary_key_cache.reference
+++ b/tests/queries/2_vector_search/00021_mqvs_support_primary_key_cache.reference
@@ -1,12 +1,12 @@
 0
-0	[0,0,0]	0.030000001
-1	[1,1,1]	2.4299998
-2	[2,2,2]	10.83
-3	[3,3,3]	25.230003
-4	[4,4,4]	45.630005
+0	0.030000001
+1	2.4299998
+2	10.83
+3	25.230003
+4	45.630005
 0
-0	[0,0,0]	0.030000001
-1	[1,1,1]	2.4299998
-2	[2,2,2]	10.83
-4	[4,4,4]	45.630005
-5	[5,5,5]	72.03
+0	0.030000001
+1	2.4299998
+2	10.83
+4	45.630005
+5	72.03
diff --git a/tests/queries/2_vector_search/00021_mqvs_support_primary_key_cache.sql b/tests/queries/2_vector_search/00021_mqvs_support_primary_key_cache.sql
index bb84d045d9..3c142d5ce6 100644
--- a/tests/queries/2_vector_search/00021_mqvs_support_primary_key_cache.sql
+++ b/tests/queries/2_vector_search/00021_mqvs_support_primary_key_cache.sql
@@ -1,11 +1,11 @@
 DROP TABLE IF EXISTS test_pk_cache;
-CREATE TABLE test_pk_cache(id Int32, vector FixedArray(Float32, 3)) engine MergeTree primary key id SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
+CREATE TABLE test_pk_cache(id UInt32, vector FixedArray(Float32, 3)) engine MergeTree primary key id SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1000, enable_primary_key_cache=true;
 INSERT INTO test_pk_cache SELECT number, [number, number, number] FROM numbers(2100);
 
 ALTER TABLE test_pk_cache ADD VECTOR INDEX v1 vector TYPE IVFFLAT;
 SELECT sleep(2);
 
-SELECT id, vector, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache;
+SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache;
 
 set allow_experimental_lightweight_delete=1;
 set mutations_sync=1;
@@ -13,6 +13,6 @@ set mutations_sync=1;
 delete from test_pk_cache where id = 3;
 SELECT sleep(1);
 
-SELECT id, vector, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache;
+SELECT id, distance('topK=5')(vector, [0.1, 0.1, 0.1]) FROM test_pk_cache;
 
 drop table test_pk_cache;
-- 
2.32.1 (Apple Git-133)

