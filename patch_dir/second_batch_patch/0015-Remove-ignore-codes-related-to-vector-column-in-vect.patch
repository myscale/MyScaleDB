From 3fb345befcc1df7e3db841afa28530a8a90604df Mon Sep 17 00:00:00 2001
From: Jianmei Zhang <jianmeiz@moqi.ai>
Date: Mon, 30 Jan 2023 08:53:24 +0000
Subject: [PATCH 15/85] Remove ignore codes related to vector column in vector
 search function

---
 src/Interpreters/ExpressionAnalyzer.cpp              |  4 +++-
 src/Interpreters/RequiredSourceColumnsVisitor.cpp    |  6 ------
 src/Parsers/ASTIdentifier.cpp                        |  7 -------
 src/Parsers/ASTIdentifier.h                          |  7 -------
 src/Parsers/ExpressionElementParsers.cpp             | 12 ------------
 .../00007_mqvs_wrong_search_col.reference            |  1 +
 .../2_vector_search/00007_mqvs_wrong_search_col.sh   |  8 ++++----
 7 files changed, 8 insertions(+), 37 deletions(-)

diff --git a/src/Interpreters/ExpressionAnalyzer.cpp b/src/Interpreters/ExpressionAnalyzer.cpp
index ca100ceed7..a2853dcf65 100644
--- a/src/Interpreters/ExpressionAnalyzer.cpp
+++ b/src/Interpreters/ExpressionAnalyzer.cpp
@@ -624,7 +624,9 @@ bool ExpressionAnalyzer::makeVectorScanDescriptions(ActionsDAGPtr & actions)
 
         vector_scan_desc.search_column_name = arguments[0]->getColumnName();
 
-        auto search_column_type = syntax->storage_snapshot->metadata->columns.getAllPhysical().tryGetByName(vector_scan_desc.search_column_name);
+        std::optional<NameAndTypePair> search_column_type = std::nullopt;
+        if (syntax->storage_snapshot && syntax->storage_snapshot->metadata)
+            search_column_type = syntax->storage_snapshot->metadata->columns.getAllPhysical().tryGetByName(vector_scan_desc.search_column_name);
 
         if (search_column_type)
         {
diff --git a/src/Interpreters/RequiredSourceColumnsVisitor.cpp b/src/Interpreters/RequiredSourceColumnsVisitor.cpp
index 7b5ea7fb0c..54039997e1 100644
--- a/src/Interpreters/RequiredSourceColumnsVisitor.cpp
+++ b/src/Interpreters/RequiredSourceColumnsVisitor.cpp
@@ -155,12 +155,6 @@ void RequiredSourceColumnsMatcher::visit(const ASTIdentifier & node, const ASTPt
     if (node.name().empty())
         throw Exception("Expected not empty name", ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH);
 
-    if (node.isIgnored())
-    {
-        LOG_DEBUG(&Poco::Logger::get("RequiredSourceColumnsMatcher"), "[visit] ignored identifier: {}", node.name());
-        return;
-    }
-
     if (!data.private_aliases.count(node.name()))
         data.addColumnIdentifier(node);
 }
diff --git a/src/Parsers/ASTIdentifier.cpp b/src/Parsers/ASTIdentifier.cpp
index 41c0072305..a889680c81 100644
--- a/src/Parsers/ASTIdentifier.cpp
+++ b/src/Parsers/ASTIdentifier.cpp
@@ -285,11 +285,4 @@ void setIdentifierSpecial(ASTPtr & ast)
             id->semantic->special = true;
 }
 
-void setIdentifierIgnored(ASTPtr & ast)
-{
-    if (ast)
-        if (auto * id = ast->as<ASTIdentifier>())
-            id->ignored = true;
-}
-
 }
diff --git a/src/Parsers/ASTIdentifier.h b/src/Parsers/ASTIdentifier.h
index 8d7bbb8681..14e2fcef39 100644
--- a/src/Parsers/ASTIdentifier.h
+++ b/src/Parsers/ASTIdentifier.h
@@ -46,8 +46,6 @@ public:
     const String & shortName() const { return name_parts.back(); }
     const String & name() const;
 
-    bool isIgnored() const { return ignored; }
-
     void restoreTable();  // TODO(ilezhankin): get rid of this
     std::shared_ptr<ASTTableIdentifier> createTable() const;  // returns |nullptr| if identifier is not table.
 
@@ -55,7 +53,6 @@ protected:
     String full_name;
     std::vector<String> name_parts;
     std::shared_ptr<IdentifierSemanticImpl> semantic; /// pimpl
-    bool ignored = false; /// used for distance and batch_distance function
 
     void formatImplWithoutAlias(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const override;
     void appendColumnNameImpl(WriteBuffer & ostr) const override;
@@ -67,7 +64,6 @@ private:
     friend class ReplaceQueryParameterVisitor;
     friend struct IdentifierSemantic;
     friend void setIdentifierSpecial(ASTPtr & ast);
-    friend void setIdentifierIgnored(ASTPtr & ast);
 
     void resetFullName();
 };
@@ -96,7 +92,4 @@ public:
     void updateTreeHashImpl(SipHash & hash_state) const override;
 };
 
-/// add back setIdentifierIgnored declaration here, because we need to use it in ExpressionElementParser.cpp
-void setIdentifierIgnored(ASTPtr & ast);
-
 }
diff --git a/src/Parsers/ExpressionElementParsers.cpp b/src/Parsers/ExpressionElementParsers.cpp
index 82d8ff2257..d57688cd22 100644
--- a/src/Parsers/ExpressionElementParsers.cpp
+++ b/src/Parsers/ExpressionElementParsers.cpp
@@ -1010,18 +1010,6 @@ bool ParserFunction::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)
         function_node->name += "Distinct";
 
     function_node->arguments = expr_list_args;
-    /// ignore vector column in vector search function
-    if (isVectorScanFunc(function_node->name))
-    {
-        if (auto * list = expr_list_args->as<ASTExpressionList>())
-        {
-            if (list->children.size() == 2)
-            {
-                LOG_DEBUG(&Poco::Logger::get("ParserFunction"), "set node ignored");
-                setIdentifierIgnored(list->children[0]);
-            }
-        }
-    }
     function_node->children.push_back(function_node->arguments);
 
     if (expr_list_params)
diff --git a/tests/queries/2_vector_search/00007_mqvs_wrong_search_col.reference b/tests/queries/2_vector_search/00007_mqvs_wrong_search_col.reference
index d86bac9de5..2c94e48371 100644
--- a/tests/queries/2_vector_search/00007_mqvs_wrong_search_col.reference
+++ b/tests/queries/2_vector_search/00007_mqvs_wrong_search_col.reference
@@ -1 +1,2 @@
 OK
+OK
diff --git a/tests/queries/2_vector_search/00007_mqvs_wrong_search_col.sh b/tests/queries/2_vector_search/00007_mqvs_wrong_search_col.sh
index 6e9bc3480a..3fa993ed6f 100755
--- a/tests/queries/2_vector_search/00007_mqvs_wrong_search_col.sh
+++ b/tests/queries/2_vector_search/00007_mqvs_wrong_search_col.sh
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 # Tags: no-parallel
 
-CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
-. "$CURDIR"/helpers/00000_prepare_index.sh
-
-clickhouse-client -q "SELECT id, vector, distance('topK=10')(vectore, [0.1, 0.1, 0.1]) FROM test_vector;" 2>&1 | grep -q "DB::Exception: wrong search column name." && echo 'OK' || echo 'FAIL' || :
+clickhouse-client -q "DROP TABLE IF EXISTS test_vector"
+clickhouse-client -q "CREATE TABLE test_vector(id Float32, vector FixedArray(Float32, 3)) engine MergeTree primary key id"
+clickhouse-client -q "SELECT id, distance('topK=10')(vectore, [0.1, 0.1, 0.1]) FROM test_vector;" 2>&1 | grep -q "DB::Exception: Missing columns: 'vectore'" && echo 'OK' || echo 'FAIL' || :
+clickhouse-client -q "SELECT [1.0, 1.1, 2.0], distance('topK=10')(vector, [0.1, 0.1, 0.1]), number FROM ( SELECT number FROM system.numbers LIMIT 100)" 2>&1 | grep -q "DB::Exception: Missing columns: 'vector'" && echo 'OK' || echo 'FAIL' || :
-- 
2.32.1 (Apple Git-133)

