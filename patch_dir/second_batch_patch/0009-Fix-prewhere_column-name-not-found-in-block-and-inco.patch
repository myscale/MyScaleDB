From 73d6e228c11e896ccc48f9749c33ec59177a7e3e Mon Sep 17 00:00:00 2001
From: Jianmei Zhang <jianmeiz@moqi.ai>
Date: Thu, 5 Jan 2023 16:52:56 +0800
Subject: [PATCH 09/85] Fix prewhere_column name not found in block and
 incorrect result when both prewhere and where exist

---
 ...MergeTreeSelectWithVectorScanProcessor.cpp | 61 +++++++++++++------
 ..._refactor_support_prewhere_where.reference | 12 ++++
 ...0_mqvs_refactor_support_prewhere_where.sql | 21 +++++++
 3 files changed, 75 insertions(+), 19 deletions(-)
 create mode 100644 tests/queries/2_vector_search/00020_mqvs_refactor_support_prewhere_where.reference
 create mode 100644 tests/queries/2_vector_search/00020_mqvs_refactor_support_prewhere_where.sql

diff --git a/src/Storages/MergeTree/MergeTreeSelectWithVectorScanProcessor.cpp b/src/Storages/MergeTree/MergeTreeSelectWithVectorScanProcessor.cpp
index 6b7571f8df..12725efd76 100644
--- a/src/Storages/MergeTree/MergeTreeSelectWithVectorScanProcessor.cpp
+++ b/src/Storages/MergeTree/MergeTreeSelectWithVectorScanProcessor.cpp
@@ -56,7 +56,7 @@ void MergeTreeSelectWithVectorScanProcessor::initializeReadersWithVectorScan()
 ColumnPtr MergeTreeSelectWithVectorScanProcessor::performPrefilter(MarkRanges & mark_ranges)
 {
     OpenTelemetrySpanHolder span("MergeTreeSelectWithVectorScanProcessor::performPrefilter()");
-    Names columns;
+    Names requried_columns;
     Names system_columns;
     system_columns.emplace_back("_part_offset");
 
@@ -71,26 +71,34 @@ ColumnPtr MergeTreeSelectWithVectorScanProcessor::performPrefilter(MarkRanges &
     {
         Names row_filter_column_names =  prewhere_info->row_level_filter->getRequiredColumnsNames();
 
-        columns.insert(columns.end(), row_filter_column_names.begin(), row_filter_column_names.end());
+        requried_columns.insert(requried_columns.end(), row_filter_column_names.begin(), row_filter_column_names.end());
         pre_name_set.insert(row_filter_column_names.begin(), row_filter_column_names.end());
     }
 
     /// 2. Columns for prewhere
-    Names all_pre_column_names = prewhere_info->prewhere_actions->getRequiredColumnsNames();
-
-    for (const auto & name : all_pre_column_names)
+    if (prewhere_info->prewhere_actions)
     {
-        if (pre_name_set.contains(name))
-            continue;
-        columns.push_back(name);
-        pre_name_set.insert(name);
+        Names all_pre_column_names = prewhere_info->prewhere_actions->getRequiredColumnsNames();
+
+        for (const auto & name : all_pre_column_names)
+        {
+            if (pre_name_set.contains(name))
+                continue;
+            requried_columns.push_back(name);
+            pre_name_set.insert(name);
+        }
     }
 
+    bool bak_remove_prewhere_column = prewhere_info->remove_prewhere_column;
     prewhere_info->remove_prewhere_column = true;
-    
+
+    /// need_filter is false when both prewhere and where exist, prewhere will be delayed, all read rows with a prehwere_column returned.
+    /// In this case, we need only rows statisfied prewhere conditions.
+    prewhere_info->need_filter = true;
+
     auto input = std::make_unique<MergeTreeInOrderSelectProcessor>(
             storage, storage_snapshot, data_part, max_block_size_rows, preferred_block_size_bytes,
-            preferred_max_column_in_block_size_bytes, columns, mark_ranges, use_uncompressed_cache, prewhere_info,
+            preferred_max_column_in_block_size_bytes, requried_columns, mark_ranges, use_uncompressed_cache, prewhere_info,
             actions_settings, reader_settings, system_columns);
 
     Pipe pipe(std::move(input));
@@ -101,13 +109,9 @@ ColumnPtr MergeTreeSelectWithVectorScanProcessor::performPrefilter(MarkRanges &
     size_t num_rows = data_part->rows_count;
 
     Block block;
-    auto new_filter = ColumnUInt8::create(num_rows);
+    auto new_filter = ColumnUInt8::create(num_rows, 0);
     IColumn::Filter & new_data = new_filter->getData();
-    for (int i = 0; i < num_rows; i++)
-    {
-        new_data[i] = 0;
-    }
-    /// new_data.resize_fill(num_rows, 0);
+
     OpenTelemetrySpanHolder span_pipe("MergeTreeSelectWithVectorScanProcessor::performPrefilter():StartPipe");
     while (filter_executor.pull(block))
     {
@@ -125,6 +129,10 @@ ColumnPtr MergeTreeSelectWithVectorScanProcessor::performPrefilter(MarkRanges &
             new_data[col_data[i]] = 1;
         }
     }
+
+    /// Restore the remove_prewhere_column.
+    prewhere_info->remove_prewhere_column = bak_remove_prewhere_column;
+
     return new_filter;
 }
 
@@ -162,7 +170,6 @@ MergeTreeBaseSelectProcessor::BlockAndRowCount MergeTreeSelectWithVectorScanProc
             prev_reader = &task->pre_range_readers.back();
             pre_readers_shift++;
         }
-
         task->range_reader = MergeTreeRangeReader(reader.get(), prev_reader, nullptr, true, non_const_virtual_column_names);
     }
     /// initializeRangeReaders(*task);
@@ -277,6 +284,22 @@ MergeTreeBaseSelectProcessor::BlockAndRowCount MergeTreeSelectWithVectorScanProc
     const size_t final_result_num_rows = read_result.num_rows;
 
     Block res_block;
+
+    /// Add prewhere column name to avoid column not found error
+    if (prewhere_info && !prewhere_info->remove_prewhere_column)
+    {
+        ColumnWithTypeAndName prewhere_col;
+
+        const auto & node = prewhere_info->prewhere_actions->findInIndex(prewhere_info->prewhere_column_name);
+        auto filter_type = node.result_type;
+
+        prewhere_col.type = filter_type;
+        prewhere_col.name = prewhere_info->prewhere_column_name;
+        prewhere_col.column = filter_type->createColumnConst(final_result_num_rows, 1);
+
+        res_block.insert(std::move(prewhere_col));
+    }
+
     for (size_t i = 0; i < ordered_columns.size(); ++i)
     {
         ColumnWithTypeAndName ctn;
@@ -306,7 +329,7 @@ MergeTreeBaseSelectProcessor::BlockAndRowCount MergeTreeSelectWithVectorScanProc
             }
         }
 
-        res_block.insert(ctn);
+        res_block.insert(std::move(ctn));
     }
 
     if (need_remove_part_offset)
diff --git a/tests/queries/2_vector_search/00020_mqvs_refactor_support_prewhere_where.reference b/tests/queries/2_vector_search/00020_mqvs_refactor_support_prewhere_where.reference
new file mode 100644
index 0000000000..bc37d7c910
--- /dev/null
+++ b/tests/queries/2_vector_search/00020_mqvs_refactor_support_prewhere_where.reference
@@ -0,0 +1,12 @@
+0
+test_vector	vector_idx	IVFFLAT	Built
+1005	2022-12-29	animal	0
+1001	2022-12-29	animal	0
+1004	2022-12-29	animal	0
+1003	2022-12-29	animal	0
+1009	2022-12-29	animal	0
+1006	2022-12-29	animal	0
+1007	2022-12-29	animal	0
+1008	2022-12-29	animal	0
+1002	2022-12-29	animal	0
+1000	2022-12-29	animal	0
diff --git a/tests/queries/2_vector_search/00020_mqvs_refactor_support_prewhere_where.sql b/tests/queries/2_vector_search/00020_mqvs_refactor_support_prewhere_where.sql
new file mode 100644
index 0000000000..cc3d7ac216
--- /dev/null
+++ b/tests/queries/2_vector_search/00020_mqvs_refactor_support_prewhere_where.sql
@@ -0,0 +1,21 @@
+drop table if exists test_vector;
+create table test_vector
+(
+    id    UInt32,
+    data  FixedArray(Float32, 3),
+    date  Date,
+    label Enum8('person' = 1, 'building' = 2, 'animal' = 3)
+)
+engine = MergeTree PRIMARY KEY id;
+
+INSERT INTO test_vector SELECT number, range(3), '2019-12-30', 'person' FROM numbers(1000);
+INSERT INTO test_vector SELECT number+1000, range(3), '2022-12-29', 'animal' FROM numbers(1000);
+INSERT INTO test_vector SELECT number+2000, range(3), '2018-12-28', 'building' FROM numbers(1000);
+
+optimize table test_vector final;
+
+alter table test_vector add vector index vector_idx data type IVFFLAT;
+select sleep(1);
+select table, name, type, status from system.vector_indices where database = currentDatabase() and table = 'test_vector';
+
+select id, date, label, distance('topK=10')(data, [0,1.0,2.0]) as dist from test_vector where toYear(date) >= 2020 and label = 'animal';
-- 
2.32.1 (Apple Git-133)

