From 3ed114ab8efb9d49461bbcf6f1a3f3495a935a41 Mon Sep 17 00:00:00 2001
From: Jianmei Zhang <jianmeiz@moqi.ai>
Date: Wed, 10 May 2023 15:56:11 +0800
Subject: [PATCH 11/49] Skip check order direction for distributed engine

---
 src/Interpreters/TreeRewriter.cpp             |  6 +++-
 ..._order_direction_for_distributed.reference |  6 ++++
 ..._check_order_direction_for_distributed.sql | 32 +++++++++++++++++++
 3 files changed, 43 insertions(+), 1 deletion(-)
 create mode 100644 tests/queries/2_vector_search/00030_mqvs_skip_check_order_direction_for_distributed.reference
 create mode 100644 tests/queries/2_vector_search/00030_mqvs_skip_check_order_direction_for_distributed.sql

diff --git a/src/Interpreters/TreeRewriter.cpp b/src/Interpreters/TreeRewriter.cpp
index 351073bda3..6b5fd2ff05 100644
--- a/src/Interpreters/TreeRewriter.cpp
+++ b/src/Interpreters/TreeRewriter.cpp
@@ -1240,6 +1240,7 @@ void TreeRewriterResult::collectForVectorScanFunctions(
         String vec_col_name = arguments[0]->getColumnName();
         String distance_col_name = node->getColumnName();
         StorageMetadataPtr metadata_snapshot = nullptr;
+        bool table_is_remote = false; /// Mark if the storage with vector column is distributed.
 
         std::optional<NameAndTypePair> search_column_type = std::nullopt;
 
@@ -1249,6 +1250,7 @@ void TreeRewriterResult::collectForVectorScanFunctions(
             /// Will be added inside collectUsedColumns() after erase unrequired columns.
             /// addDistanceFuncColName(distance_col_name, source_columns);
             metadata_snapshot = storage_snapshot->metadata;
+            table_is_remote = is_remote_storage;
 
             search_column_type = metadata_snapshot->columns.getAllPhysical().tryGetByName(vec_col_name);
         }
@@ -1281,6 +1283,7 @@ void TreeRewriterResult::collectForVectorScanFunctions(
             auto table_id = context->resolveStorageID(StorageID(right_table.table.database, right_table.table.table, right_table.table.uuid));
             const auto & right_table_storage = DatabaseCatalog::instance().getTable(table_id, context);
             metadata_snapshot = right_table_storage->getInMemoryMetadataPtr();
+            table_is_remote = right_table_storage->isRemote();
         }
         else if (tables_with_columns.size() == 1)
         {
@@ -1316,7 +1319,8 @@ void TreeRewriterResult::collectForVectorScanFunctions(
         }
 
         /// When metric_type = IP in definition of vector index, order by must be DESC.
-        if (metadata_snapshot)
+        /// Skip the check when table is distributed.
+        if (metadata_snapshot && !table_is_remote)
         {
             /// 1 for ASC, -1 for DESC
             int direction = 1;
diff --git a/tests/queries/2_vector_search/00030_mqvs_skip_check_order_direction_for_distributed.reference b/tests/queries/2_vector_search/00030_mqvs_skip_check_order_direction_for_distributed.reference
new file mode 100644
index 0000000000..0d9ce456d6
--- /dev/null
+++ b/tests/queries/2_vector_search/00030_mqvs_skip_check_order_direction_for_distributed.reference
@@ -0,0 +1,6 @@
+metric_type=L2
+1	0
+2	3
+metric_type=IP
+100	300
+99	297
diff --git a/tests/queries/2_vector_search/00030_mqvs_skip_check_order_direction_for_distributed.sql b/tests/queries/2_vector_search/00030_mqvs_skip_check_order_direction_for_distributed.sql
new file mode 100644
index 0000000000..71d99fcf4e
--- /dev/null
+++ b/tests/queries/2_vector_search/00030_mqvs_skip_check_order_direction_for_distributed.sql
@@ -0,0 +1,32 @@
+
+-- Tags: no-parallel
+
+DROP TABLE IF EXISTS test_vector_metric_type;
+CREATE TABLE test_vector_metric_type
+(
+    id UInt32,
+    vector Array(Float32),
+    CONSTRAINT check_length CHECK length(vector) = 3
+)
+engine = MergeTree ORDER BY id;
+
+INSERT INTO test_vector_metric_type SELECT number, [number, number, number] from numbers(1, 100);
+
+DROP TABLE IF EXISTS test_distributed;
+CREATE TABLE test_distributed (id UInt32, vector Array(Float32), CONSTRAINT check_length CHECK length(vector) = 3) ENGINE=Distributed(test_shard_localhost, currentDatabase(), 'test_vector_metric_type');
+
+SELECT 'metric_type=L2';
+ALTER TABLE test_vector_metric_type ADD VECTOR INDEX v2 vector TYPE HNSWFLAT('metric_type=L2');
+
+SELECT id, distance(vector, [1.0, 1.0, 1.0]) as d FROM test_distributed order by d limit 2;
+SELECT id, distance(vector, [1.0, 1.0, 1.0]) as d FROM test_distributed order by d DESC limit 2; -- { serverError 62 }
+ALTER TABLE test_vector_metric_type DROP VECTOR INDEX v2;
+
+SELECT 'metric_type=IP';
+ALTER TABLE test_vector_metric_type ADD VECTOR INDEX v2 vector TYPE HNSWFLAT('metric_type=IP');
+
+SELECT id, distance(vector, [1.0, 1.0, 1.0]) as d FROM test_distributed order by d DESC limit 2;
+SELECT id, distance(vector, [1.0, 1.0, 1.0]) as d FROM test_distributed order by d limit 2; -- { serverError 62 }
+
+DROP TABLE test_vector_metric_type;
+DROP TABLE test_distributed;
-- 
2.32.1 (Apple Git-133)

