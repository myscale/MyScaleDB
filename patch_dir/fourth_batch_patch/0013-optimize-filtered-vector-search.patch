From cb399d9aa9987acee1e3f5d91dcae54d7bcf2f8a Mon Sep 17 00:00:00 2001
From: Qin Liu <lqgy2001@gmail.com>
Date: Tue, 9 May 2023 11:44:17 +0800
Subject: [PATCH 13/49] optimize filtered vector search

---
 contrib/search-index                          |  2 +-
 .../MergeTreeBaseSelectProcessor.cpp          | 39 +++-----
 ...MergeTreeSelectWithVectorScanProcessor.cpp | 32 +++----
 .../MergeTreeSelectWithVectorScanProcessor.h  |  5 +-
 .../MergeTree/MergeTreeVectorScanManager.cpp  | 94 ++++---------------
 .../MergeTree/MergeTreeVectorScanManager.h    | 14 +--
 src/VectorIndex/VectorSegmentExecutor.cpp     |  9 +-
 src/VectorIndex/VectorSegmentExecutor.h       | 31 +++---
 8 files changed, 72 insertions(+), 154 deletions(-)

diff --git a/contrib/search-index b/contrib/search-index
index c45dbac6d2..b939424a46 160000
--- a/contrib/search-index
+++ b/contrib/search-index
@@ -1 +1 @@
-Subproject commit c45dbac6d22cec32baa0245357c64a9fee786c2a
+Subproject commit b939424a46913018e5781d396e01a9cd31582243
diff --git a/src/Storages/MergeTree/MergeTreeBaseSelectProcessor.cpp b/src/Storages/MergeTree/MergeTreeBaseSelectProcessor.cpp
index 406d410eb1..61683fc370 100644
--- a/src/Storages/MergeTree/MergeTreeBaseSelectProcessor.cpp
+++ b/src/Storages/MergeTree/MergeTreeBaseSelectProcessor.cpp
@@ -417,14 +417,6 @@ MergeTreeBaseSelectProcessor::BlockAndRowCount MergeTreeBaseSelectProcessor::rea
         current_max_block_size_rows, current_preferred_max_column_in_block_size_bytes, min_filtration_ratio);
     UInt64 rows_to_read = std::max(UInt64(1), std::min(current_max_block_size_rows, recommended_rows));
 
-    /// LOG_DEBUG(log, "[readFromPartImpl] current_max_block_size_rows: {}, recommended_rows: {}",
-    ///             current_max_block_size_rows, recommended_rows);
-
-    /// used for vector scan result merge
-    /// auto start_row = index_granularity.getMarkStartingRow(task->range_reader.currentMark()) + task->range_reader.numReadRowsInCurrentGranule();
-
-    /// LOG_DEBUG(log, "[readFromPartImpl]: start row: {}, current mark: {}", start_row, task->range_reader.currentMark());
-
     bool pk_cache_side = false;
 
     const KeyDescription & pk_description = storage_snapshot->metadata->getPrimaryKey();
@@ -554,23 +546,6 @@ MergeTreeBaseSelectProcessor::BlockAndRowCount MergeTreeBaseSelectProcessor::rea
 
     auto read_ranges = read_result.readRanges();
 
-    /*
-    for (auto range : read_ranges) 
-    {
-        
-        if (read_result.getFilter()) 
-        {
-            LOG_DEBUG(log, "[readFromPartImpl] read range: start_pos: {}, num_rows: {}, start_mark: {}, end_mark: {}, filter size: {}",
-                range.start_row, range.row_num, range.start_mark, range.end_mark, read_result.getFilter()->size());
-        }
-        else
-        {
-            LOG_DEBUG(log, "[readFromPartImpl] read range: start_pos: {}, num_rows: {}, start_mark: {}, end_mark: {}",
-                range.start_row, range.row_num, range.start_mark, range.end_mark);
-        }
-    }
-    */
-
     if (task->size_predictor)
     {
         task->size_predictor->updateFilteredRowsRation(read_result.numReadRows(), num_filtered_rows);
@@ -632,6 +607,18 @@ MergeTreeBaseSelectProcessor::BlockAndRowCount MergeTreeBaseSelectProcessor::rea
         }
         else
         {
+            Search::DenseBitmapPtr filter = nullptr;
+            if (read_result.getFilter())
+            {
+                filter = std::make_shared<Search::DenseBitmap>(read_result.num_rows);
+                for (size_t i = 0; i < read_result.getFilter()->getData().size(); i++)
+                {
+                    if (read_result.getFilter()->getData()[i])
+                    {
+                        filter->set(i);
+                    }
+                }
+            }
             task->vector_scan_manager->executeAfterRead(
                 task->data_part->getFullPath(),
                 task->data_part,
@@ -639,7 +626,7 @@ MergeTreeBaseSelectProcessor::BlockAndRowCount MergeTreeBaseSelectProcessor::rea
                 read_result.num_rows,
                 read_ranges,
                 this->prewhere_info != nullptr,
-                read_result.getFilter());
+                filter);
         }
     }
     part_offset = nullptr; // after merge, it became invalid
diff --git a/src/Storages/MergeTree/MergeTreeSelectWithVectorScanProcessor.cpp b/src/Storages/MergeTree/MergeTreeSelectWithVectorScanProcessor.cpp
index 307480f694..7748311223 100644
--- a/src/Storages/MergeTree/MergeTreeSelectWithVectorScanProcessor.cpp
+++ b/src/Storages/MergeTree/MergeTreeSelectWithVectorScanProcessor.cpp
@@ -78,7 +78,7 @@ void MergeTreeSelectWithVectorScanProcessor::initializeReadersWithVectorScan()
     }
 }
 
-ColumnPtr MergeTreeSelectWithVectorScanProcessor::performPrefilter(MarkRanges & mark_ranges)
+Search::DenseBitmapPtr MergeTreeSelectWithVectorScanProcessor::performPrefilter(MarkRanges & mark_ranges)
 {
     OpenTelemetrySpanHolder span("MergeTreeSelectWithVectorScanProcessor::performPrefilter()");
     Names requried_columns;
@@ -134,28 +134,20 @@ ColumnPtr MergeTreeSelectWithVectorScanProcessor::performPrefilter(MarkRanges &
     size_t num_rows = data_part->rows_count;
 
     Block block;
-    auto new_filter = ColumnUInt8::create(num_rows, 0);
-    IColumn::Filter & new_data = new_filter->getData();
-
-    OpenTelemetrySpanHolder span_pipe("MergeTreeSelectWithVectorScanProcessor::performPrefilter():StartPipe");
-    while (filter_executor.pull(block))
+    Search::DenseBitmapPtr filter = std::make_shared<Search::DenseBitmap>(num_rows);
     {
-        /*
-        LOG_DEBUG(log, "[performPrefilter] block column size: {}", block.getNames().size());
-        for (const auto & name : block.getNames())
-        {
-            LOG_DEBUG(log, "[performPrefilter] block column: {}", name);
-        }
-        */
-        // OpenTelemetrySpanHolder span_pipe("MergeTreeSelectWithVectorScanProcessor::performPrefilter():StartPipe::CopyToFilter");
-        const PaddedPODArray<UInt64>& col_data = checkAndGetColumn<ColumnUInt64>(*block.getByName("_part_offset").column)->getData();
-        for (size_t i = 0; i < block.rows(); ++i)
+        OpenTelemetrySpanHolder span_pipe("MergeTreeSelectWithVectorScanProcessor::performPrefilter()::StartPipe");
+        while (filter_executor.pull(block))
         {
-            new_data[col_data[i]] = 1;
+            const PaddedPODArray<UInt64> & col_data = checkAndGetColumn<ColumnUInt64>(*block.getByName("_part_offset").column)->getData();
+            for (size_t i = 0; i < block.rows(); ++i)
+            {
+                filter->set(col_data[i]);
+            }
         }
     }
 
-    return new_filter;
+    return filter;
 }
 
 
@@ -616,14 +608,12 @@ try
         /// 1 read, then get the filtered part_offsets
         /// 2 perform vector scan based on part_offsets
         /// 3 filter mark_ranges based on vector scan results
-        auto filter_col = performPrefilter(mark_ranges_for_task);
-        auto filter = typeid_cast<const ColumnUInt8 *>(filter_col.get());
+        auto filter = performPrefilter(mark_ranges_for_task);
         ReadRanges read_ranges;
         ReadRange read_range{0, data_part->rows_count, 0, data_part->index_granularity.getMarksCount()};
         read_ranges.emplace_back(read_range);
         vector_scan_manager->executeVectorScanWithFilter(data_part->getFullPath(), data_part, read_ranges, filter);
         filterMarkRangesByVectorScanResult(data_part, vector_scan_manager, mark_ranges_for_task);
-        /// prewhere_info = nullptr;
     }
 
     for (const auto & range : mark_ranges_for_task)
diff --git a/src/Storages/MergeTree/MergeTreeSelectWithVectorScanProcessor.h b/src/Storages/MergeTree/MergeTreeSelectWithVectorScanProcessor.h
index f2d1c5091c..2e126bf2bb 100644
--- a/src/Storages/MergeTree/MergeTreeSelectWithVectorScanProcessor.h
+++ b/src/Storages/MergeTree/MergeTreeSelectWithVectorScanProcessor.h
@@ -1,9 +1,12 @@
 #pragma once
+
 #include <Storages/MergeTree/MergeTreeSelectProcessor.h>
 #include <Storages/SelectQueryInfo.h>
 
 #include <base/logger_useful.h>
 
+#include <SearchIndex/Common/DenseBitmap.h>
+
 namespace DB
 {
 class MergeTreeSelectWithVectorScanProcessor final : public MergeTreeSelectProcessor
@@ -35,7 +38,7 @@ private:
 
     BlockAndRowCount readFromPartWithVectorScan();
 
-    ColumnPtr performPrefilter(MarkRanges & mark_ranges);
+    Search::DenseBitmapPtr performPrefilter(MarkRanges & mark_ranges);
 
     Poco::Logger * log = &Poco::Logger::get("MergeTreeSelectWithVectorScanProcessor");
 
diff --git a/src/Storages/MergeTree/MergeTreeVectorScanManager.cpp b/src/Storages/MergeTree/MergeTreeVectorScanManager.cpp
index cacd70d4ce..949ff08a17 100644
--- a/src/Storages/MergeTree/MergeTreeVectorScanManager.cpp
+++ b/src/Storages/MergeTree/MergeTreeVectorScanManager.cpp
@@ -177,7 +177,7 @@ void MergeTreeVectorScanManager::executeAfterRead(
     size_t & read_rows,
     const ReadRanges & read_ranges,
     bool has_prewhere,
-    const ColumnUInt8 * filter)
+    const Search::DenseBitmapPtr filter)
 {
     if (vector_scan_info->is_batch)
     {
@@ -211,13 +211,13 @@ void MergeTreeVectorScanManager::executeVectorScanWithFilter(
     const String& data_path,
     const MergeTreeData::DataPartPtr & data_part,
     const ReadRanges & read_ranges,
-    const ColumnUInt8 * filter)
+    const Search::DenseBitmapPtr filter)
 {
     this->vector_scan_result = vectorScan(vector_scan_info->is_batch, data_path, data_part, read_ranges, filter);
 }
 
 VectorScanResultPtr MergeTreeVectorScanManager::vectorScan(
-    bool is_batch, const String & data_path, const MergeTreeData::DataPartPtr & data_part, const ReadRanges & read_ranges, const ColumnUInt8 * filter)
+    bool is_batch, const String & data_path, const MergeTreeData::DataPartPtr & data_part, const ReadRanges & read_ranges, const Search::DenseBitmapPtr filter)
 {
     OpenTelemetrySpanHolder span("MergeTreeVectorScanManager::vectorScan()");
     VectorIndexDescription index;
@@ -306,50 +306,9 @@ VectorScanResultPtr MergeTreeVectorScanManager::vectorScan(
         Search::IndexType index_type = VectorIndex::getIndexType(index.type);
         Search::Parameters index_params = VectorIndex::convertPocoJsonToMap(index.parameters);
         index_params.erase("metric_type");
-        DB::OpenTelemetrySpanHolder span2("MergeTreeVectorScanManager::vectorScan::find_index");
+        DB::OpenTelemetrySpanHolder span2("MergeTreeVectorScanManager::vectorScan()::find_index");
         span2.addAttribute("vectorScan.segment_ids", segment_ids.size());
 
-        std::vector<uint64_t> selected_row_ids;
-        if (filter)
-        {
-            OpenTelemetrySpanHolder span3("MergeTreeVectorScanManager::vectorScan()::find_index::proc_filter");
-            auto & filter_data = filter->getData();
-            int range_index = 0;
-            size_t start_pos = read_ranges[range_index].start_row;
-            size_t offset = 0;
-            size_t filter_data_size = 0;
-            for (size_t i = 0; i < filter_data.size(); ++i)
-            {
-                /// to another read range
-                if (offset >= read_ranges[range_index].row_num)
-                {
-                    ++range_index;
-                    start_pos = read_ranges[range_index].start_row;
-                    offset = 0;
-                }
-                if (filter_data[i])
-                {
-                    ++filter_data_size;
-                    // LOG_DEBUG(log, "set filter: i: {}, start_pos: {}, offset: {}", i, start_pos, offset);
-                    selected_row_ids.emplace_back(start_pos + offset);
-                }
-                ++offset;
-            }
-            LOG_DEBUG(log, "Filter size: {}, read_range size: {}", filter_data_size, read_ranges.size());
-            span3.addAttribute("vectorScan.filter_sizes", filter_data_size);
-            span3.addAttribute("vectorScan.read_ranges", read_ranges.size());
-        }
-        else if (!read_ranges.empty()) /// having prewhere, but this read round does not generate a filter
-        {
-            OpenTelemetrySpanHolder span3("MergeTreeVectorScanManager::vectorScan()::find_index::generate_row_ids");
-            size_t start_pos = read_ranges[0].start_row;
-            size_t read_row_num = read_ranges[0].row_num;
-            for (size_t i = start_pos; i < start_pos + read_row_num; ++i)
-            {
-                selected_row_ids.emplace_back(i);
-            }
-        }
-
         std::vector<VectorIndex::VectorSegmentExecutorPtr> vec_executors;
         bool retry = false;
         bool brute_force = false;
@@ -462,24 +421,15 @@ VectorScanResultPtr MergeTreeVectorScanManager::vectorScan(
 
         for (VectorIndex::VectorSegmentExecutorPtr & vec_executor : vec_executors)
         {
-            OpenTelemetrySpanHolder span3("MergeTreeVectorScanManager::vectorScan::build_bitmap_search_segment");
-            Search::DenseBitmapPtr bits;
+            OpenTelemetrySpanHolder span3("MergeTreeVectorScanManager::vectorScan()::find_index::search");
 
-            /// have no filter
-            if (selected_row_ids.empty() && read_ranges.empty())
-            {
-                OpenTelemetrySpanHolder span4("MergeTreeVectorScanManager::vectorScan()::find_index::segment_set_empty_bitmap");
-                bits = nullptr;
-            }
-            else 
+            Search::DenseBitmapPtr real_filter = nullptr;
+            if (filter != nullptr)
             {
-                OpenTelemetrySpanHolder span4("MergeTreeVectorScanManager::vectorScan()::find_index::segment_get_real_bitmap");
-                /// handle filter case
-                bits = vec_executor->getRealBitMap(selected_row_ids);
-                span4.addAttribute("selected_row_ids.size", selected_row_ids.size());
+                real_filter = vec_executor->getRealBitmap(filter);
             }
 
-            if (bits != nullptr && !bits->any())
+            if (real_filter != nullptr && !real_filter->any())
             {
                 /// don't perform vector search if the segment is completely filtered out
                 continue;
@@ -487,7 +437,7 @@ VectorScanResultPtr MergeTreeVectorScanManager::vectorScan(
 
             LOG_DEBUG(log, "Start search: vector num: {}", vec_data->getVectorNum());
 
-            auto search_results = vec_executor->search(vec_data, k, bits, search_params);
+            auto search_results = vec_executor->search(vec_data, k, real_filter, search_params);
             auto per_id = search_results->getResultIndices();
             auto per_distance = search_results->getResultDistances();
 
@@ -548,7 +498,7 @@ VectorScanResultPtr MergeTreeVectorScanManager::vectorScan(
 }
 
 void MergeTreeVectorScanManager::mergeResult(
-    Columns & pre_result, size_t & read_rows, const ReadRanges & read_ranges, const ColumnUInt8 * filter, const ColumnUInt64 * part_offset)
+    Columns & pre_result, size_t & read_rows, const ReadRanges & read_ranges, const Search::DenseBitmapPtr filter, const ColumnUInt64 * part_offset)
 {
     if (vector_scan_info->is_batch)
     {
@@ -565,7 +515,7 @@ void MergeTreeVectorScanManager::mergeBatchVectorScanResult(
     size_t & read_rows,
     const ReadRanges & read_ranges,
     VectorScanResultPtr tmp_result,
-    const ColumnUInt8 * filter,
+    const Search::DenseBitmapPtr filter,
     const ColumnUInt64 * part_offset)
 {
     OpenTelemetrySpanHolder span("MergeTreeVectorScanManager::mergeBatchVectorScanResult()");
@@ -586,12 +536,11 @@ void MergeTreeVectorScanManager::mergeBatchVectorScanResult(
     if (filter)
     {
         /// merge label and distance result into result columns
-        auto & filter_data = filter->getData();
         size_t current_column_pos = 0;
         int range_index = 0;
         size_t start_pos = read_ranges[range_index].start_row;
         size_t offset = 0;
-        for (size_t i = 0; i < filter_data.size(); ++i)
+        for (size_t i = 0; i < filter->get_size(); ++i)
         {
             if (offset >= read_ranges[range_index].row_num)
             {
@@ -600,7 +549,7 @@ void MergeTreeVectorScanManager::mergeBatchVectorScanResult(
                 offset = 0;
             }
 
-            if (filter_data[i])
+            if (filter->unsafe_test(i))
             {
                 for (size_t ind = 0; ind < label_column->size(); ++ind)
                 {
@@ -727,7 +676,7 @@ void MergeTreeVectorScanManager::mergeVectorScanResult(
     size_t & read_rows,
     const ReadRanges & read_ranges,
     VectorScanResultPtr tmp_result,
-    const ColumnUInt8 * filter,
+    const Search::DenseBitmapPtr filter,
     const ColumnUInt64 * part_offset)
 {
     OpenTelemetrySpanHolder span("MergeTreeVectorScanManager::mergeVectorScanResult()");
@@ -751,12 +700,11 @@ void MergeTreeVectorScanManager::mergeVectorScanResult(
 
     if (filter)
     {
-        auto & filter_data = filter->getData();
         size_t current_column_pos = 0;
         int range_index = 0;
         size_t start_pos = read_ranges[range_index].start_row;
         size_t offset = 0;
-        for (size_t i = 0; i < filter_data.size(); ++i)
+        for (size_t i = 0; i < filter->get_size(); ++i)
         {
             if (offset >= read_ranges[range_index].row_num)
             {
@@ -764,9 +712,8 @@ void MergeTreeVectorScanManager::mergeVectorScanResult(
                 start_pos = read_ranges[range_index].start_row;
                 offset = 0;
             }
-            if (filter_data[i])
+            if (filter->unsafe_test(i))
             {
-                /// LOG_DEBUG(log, "range_index: {}, start_pos: {}, offset: {}, i: {}, filter_data row id: {}", range_index, start_pos, offset, i, start_pos + offset);
                 /// for each vector search result, try to find if there is one with label equals to row id.
                 for (size_t ind = 0; ind < label_column->size(); ++ind)
                 {
@@ -876,7 +823,7 @@ void MergeTreeVectorScanManager::mergeVectorScanResult(
 VectorScanResultPtr MergeTreeVectorScanManager::vectorScanWithoutIndex(
     const MergeTreeData::DataPartPtr part,
     const ReadRanges & read_ranges,
-    const ColumnUInt8 * filter,
+    const Search::DenseBitmapPtr filter,
     VectorIndex::VectorDatasetPtr & query_vector,
     const String & search_column,
     int dim,
@@ -969,7 +916,6 @@ VectorScanResultPtr MergeTreeVectorScanManager::vectorScanWithoutIndex(
                 read_ranges[i].end_mark,
                 read_ranges[i].start_row);
         }
-        LOG_TRACE(log, "filter size: {}", filter->getData().size());
 
         size_t filter_parsed = 0;
         for (const auto & single_range : read_ranges)
@@ -1014,7 +960,6 @@ VectorScanResultPtr MergeTreeVectorScanManager::vectorScanWithoutIndex(
             actual_id_in_range.reserve(single_range.row_num);
 
             /// filter out the data we want to do ANN on using the filter
-            const auto & filter_data = filter->getData();
             size_t start_pos = filter_parsed;
             size_t row_in_range = 0;
 
@@ -1024,7 +969,7 @@ VectorScanResultPtr MergeTreeVectorScanManager::vectorScanWithoutIndex(
             /// each array represents all the rows in a single range
             for (size_t i = start_pos; i < start_pos + single_range.row_num; ++i)
             {
-                if (filter_data[i])
+                if (filter->unsafe_test(i))
                 {
                     size_t vec_start_offset = row_in_range != 0 ? offsets[row_in_range - 1] : 0;
                     size_t vec_end_offset = offsets[row_in_range];
@@ -1202,7 +1147,6 @@ VectorScanResultPtr MergeTreeVectorScanManager::vectorScanWithoutIndex(
             UInt32 vector_id = label / k;
             if (final_id[label] > -1 && row_exists->is_member(final_id[label]))
             {
-                /// LOG_DEBUG(log, "[vectorScan] label: {}, distance: {}", final_id[label], final_distance[label]);
                 label_column->insert(final_id[label]);
                 vector_id_column->insert(vector_id);
                 distance_column->insert(final_distance[label]);
diff --git a/src/Storages/MergeTree/MergeTreeVectorScanManager.h b/src/Storages/MergeTree/MergeTreeVectorScanManager.h
index f3d1dfd77e..593a555662 100644
--- a/src/Storages/MergeTree/MergeTreeVectorScanManager.h
+++ b/src/Storages/MergeTree/MergeTreeVectorScanManager.h
@@ -43,19 +43,19 @@ public:
         size_t & read_rows,
         const ReadRanges & read_ranges,
         bool has_prewhere = false,
-        const ColumnUInt8 * filter = nullptr);
+        const Search::DenseBitmapPtr filter = nullptr);
 
     void executeVectorScanWithFilter(
         const String& data_path,
         const MergeTreeData::DataPartPtr & data_part,
         const ReadRanges & read_ranges,
-        const ColumnUInt8 * filter = nullptr);
+        const Search::DenseBitmapPtr filter);
 
     void mergeResult(
         Columns & pre_result,
         size_t & read_rows,
         const ReadRanges & read_ranges,
-        const ColumnUInt8 * filter = nullptr,
+        const Search::DenseBitmapPtr filter = nullptr,
         const ColumnUInt64 * part_offset = nullptr);
     
     bool preComputed() { return vector_scan_result != nullptr; }
@@ -86,13 +86,13 @@ private:
         const String& data_path,
         const MergeTreeData::DataPartPtr & data_part = nullptr,
         const ReadRanges & read_ranges = ReadRanges(),
-        const ColumnUInt8 * filter = nullptr);
+        const Search::DenseBitmapPtr filter = nullptr);
 
     /// brute force vector search
     VectorScanResultPtr vectorScanWithoutIndex(
         const MergeTreeData::DataPartPtr part,
         const ReadRanges & read_ranges,
-        const ColumnUInt8 * filter,
+        const Search::DenseBitmapPtr filter,
         VectorIndex::VectorDatasetPtr & query_vector,
         const String & search_column,
         int dim,
@@ -105,7 +105,7 @@ private:
         size_t & read_rows,
         const ReadRanges & read_ranges = ReadRanges(),
         VectorScanResultPtr tmp_result = nullptr,
-        const ColumnUInt8 * filter = nullptr,
+        const Search::DenseBitmapPtr = nullptr,
         const ColumnUInt64 * part_offset = nullptr);
 
     void mergeVectorScanResult(
@@ -113,7 +113,7 @@ private:
         size_t & read_rows,
         const ReadRanges & read_ranges = ReadRanges(),
         VectorScanResultPtr tmp_result = nullptr,
-        const ColumnUInt8 * filter = nullptr,
+        const Search::DenseBitmapPtr = nullptr,
         const ColumnUInt64 * part_offset = nullptr);
 
     void searchWrapper(
diff --git a/src/VectorIndex/VectorSegmentExecutor.cpp b/src/VectorIndex/VectorSegmentExecutor.cpp
index 6d881822af..f608c0614d 100644
--- a/src/VectorIndex/VectorSegmentExecutor.cpp
+++ b/src/VectorIndex/VectorSegmentExecutor.cpp
@@ -602,7 +602,7 @@ Status VectorSegmentExecutor::load()
 std::shared_ptr<Search::SearchResult> VectorSegmentExecutor::search(
     VectorDatasetPtr dataset,
     int32_t k,
-    Search::DenseBitmapPtr & filter,
+    const Search::DenseBitmapPtr & filter,
     Search::Parameters & parameters)
 {
     DB::OpenTelemetrySpanHolder span("VectorSegmentExecutor::search()");
@@ -627,16 +627,17 @@ std::shared_ptr<Search::SearchResult> VectorSegmentExecutor::search(
 
     SearchThreadLimiter limiter(log, max_threads);
 
+    auto merged_filter = filter;
     // Merge filter and delete_bitmap
     if (!delete_bitmap->all())
-        filter = Search::mergeDenseBitmap(filter, delete_bitmap);
+        merged_filter = Search::mergeDenseBitmap(filter, delete_bitmap);
 
     // Perform the search and handle the results
     try
     {
         if (fallback_to_flat)
             parameters.clear();
-        return performSearch(dataset, k, filter, parameters);
+        return performSearch(dataset, k, merged_filter, parameters);
     }
     catch (const SearchIndexException & e)
     {
@@ -652,7 +653,7 @@ std::shared_ptr<Search::SearchResult> VectorSegmentExecutor::search(
 std::shared_ptr<Search::SearchResult> VectorSegmentExecutor::performSearch(
     VectorDatasetPtr dataset,
     int32_t k,
-    Search::DenseBitmapPtr & filter,
+    const Search::DenseBitmapPtr & filter,
     Search::Parameters & parameters)
 {
     std::shared_ptr<Search::SearchResult> ret;
diff --git a/src/VectorIndex/VectorSegmentExecutor.h b/src/VectorIndex/VectorSegmentExecutor.h
index d32571bacd..5032af901d 100644
--- a/src/VectorIndex/VectorSegmentExecutor.h
+++ b/src/VectorIndex/VectorSegmentExecutor.h
@@ -141,7 +141,7 @@ public:
     std::shared_ptr<Search::SearchResult> search(
         VectorDatasetPtr dataset,
         int32_t k,
-        Search::DenseBitmapPtr & filter,
+        const Search::DenseBitmapPtr & filter,
         Search::Parameters & parameters);
 
     void buildIndex(PartReader * reader, bool slow_mode, size_t train_block_size, size_t add_block_size);
@@ -176,28 +176,21 @@ public:
     /// expire the related index from cache.
     static Status removeFromCache(const CacheKey & cache_key);
 
-    Search::DenseBitmapPtr getRealBitMap(const std::vector<UInt64> & selected_row_ids)
+    Search::DenseBitmapPtr getRealBitmap(const Search::DenseBitmapPtr & filter)
     {
-        Search::DenseBitmapPtr bits = std::make_shared<Search::DenseBitmap>(total_vec);
-        if (segment_id.fromMergedParts())
-        {
-            /// need to transfer merged row id to real row id of this old data part.
-            for (auto & new_row_id : selected_row_ids)
-            {
-                if (segment_id.getOwnPartId() == (*inverted_row_sources_map)[new_row_id])
-                {
-                    bits->set((*inverted_row_ids_map)[new_row_id]);
-                }
-            }
-        }
-        else
+        if (!segment_id.fromMergedParts())
+            return filter;
+
+        Search::DenseBitmapPtr real_filter = std::make_shared<Search::DenseBitmap>(total_vec);
+        /// Transfer row IDs in the decoupled data part to real row IDs of the old data part.
+        for (auto & new_row_id : filter->to_vector())
         {
-            for (auto & row_id : selected_row_ids)
+            if (segment_id.getOwnPartId() == (*inverted_row_sources_map)[new_row_id])
             {
-                bits->set(row_id);
+                real_filter->set((*inverted_row_ids_map)[new_row_id]);
             }
         }
-        return bits;
+        return real_filter;
     }
 
     /// Update SegmentId
@@ -224,7 +217,7 @@ private:
     std::shared_ptr<Search::SearchResult> performSearch(
         VectorDatasetPtr dataset,
         int32_t k,
-        Search::DenseBitmapPtr & filter,
+        const Search::DenseBitmapPtr & filter,
         Search::Parameters & parameters);
 
     void transferToNewRowIds(int64_t *& labels, int size)
-- 
2.32.1 (Apple Git-133)

