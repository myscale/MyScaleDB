From 465656e24a42f9b4496131b6dd78a7b2606b4666 Mon Sep 17 00:00:00 2001
From: Xu Jing <xuj@moqi.ai>
Date: Mon, 8 May 2023 12:49:16 -0600
Subject: [PATCH 22/49] improve replicated database engine for saas

---
 src/Core/Settings.h                           |  2 +
 src/Core/SettingsEnums.cpp                    |  3 +-
 src/Core/SettingsEnums.h                      |  1 +
 src/Interpreters/InterpreterCreateQuery.cpp   | 44 +++++++++++++++++--
 .../configs/default_replicated.xml            | 14 ++++++
 .../test_replicated_database/test.py          | 21 +++++++++
 ...42_default_replicated_parameters.reference |  2 +
 .../02542_default_replicated_parameters.sql   | 14 ++++++
 8 files changed, 96 insertions(+), 5 deletions(-)
 create mode 100644 tests/integration/test_replicated_database/configs/default_replicated.xml
 create mode 100644 tests/queries/0_stateless/02542_default_replicated_parameters.reference
 create mode 100644 tests/queries/0_stateless/02542_default_replicated_parameters.sql

diff --git a/src/Core/Settings.h b/src/Core/Settings.h
index 6cae503b43..792c39efe7 100644
--- a/src/Core/Settings.h
+++ b/src/Core/Settings.h
@@ -1070,6 +1070,8 @@ class IColumn;
     M(UInt64, max_distributed_depth, 5, "Maximum distributed query depth", 0) \
     M(Bool, database_replicated_always_detach_permanently, false, "Execute DETACH TABLE as DETACH TABLE PERMANENTLY if database engine is Replicated", 0) \
     M(Bool, database_replicated_allow_only_replicated_engine, false, "Allow to create only Replicated tables in database with engine Replicated", 0) \
+    M(Bool, database_replicated_always_convert_table_to_replicated, false, "Always convert tables to Replicated tables in database with engine Replicated", 0) \
+    M(String, database_replicated_default_zk_path_prefix, "", "Fill replicated database engine zk_path with this prefix + database name when creating a database. If empty, zk_path will not be set automatically", 0) \
     M(DistributedDDLOutputMode, distributed_ddl_output_mode, DistributedDDLOutputMode::THROW, "Format of distributed DDL query result", 0) \
     M(UInt64, distributed_ddl_entry_format_version, 1, "Version of DDL entry to write into ZooKeeper", 0) \
     \
diff --git a/src/Core/SettingsEnums.cpp b/src/Core/SettingsEnums.cpp
index d1d225ba89..d046f867a6 100644
--- a/src/Core/SettingsEnums.cpp
+++ b/src/Core/SettingsEnums.cpp
@@ -92,7 +92,8 @@ IMPLEMENT_SETTING_ENUM_WITH_RENAME(LogQueriesType, ErrorCodes::BAD_ARGUMENTS,
 
 IMPLEMENT_SETTING_ENUM_WITH_RENAME(DefaultDatabaseEngine, ErrorCodes::BAD_ARGUMENTS,
     {{"Ordinary", DefaultDatabaseEngine::Ordinary},
-     {"Atomic",   DefaultDatabaseEngine::Atomic}})
+     {"Atomic",   DefaultDatabaseEngine::Atomic},
+     {"Replicated", DefaultDatabaseEngine::Replicated}})
 
 IMPLEMENT_SETTING_ENUM_WITH_RENAME(DefaultTableEngine, ErrorCodes::BAD_ARGUMENTS,
     {{"None", DefaultTableEngine::None},
diff --git a/src/Core/SettingsEnums.h b/src/Core/SettingsEnums.h
index 026df53abf..ee829c7c87 100644
--- a/src/Core/SettingsEnums.h
+++ b/src/Core/SettingsEnums.h
@@ -116,6 +116,7 @@ enum class DefaultDatabaseEngine
 {
     Ordinary,
     Atomic,
+    Replicated,
 };
 
 DECLARE_SETTING_ENUM(DefaultDatabaseEngine)
diff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp
index 6964e7c4d3..dbce0b8159 100644
--- a/src/Interpreters/InterpreterCreateQuery.cpp
+++ b/src/Interpreters/InterpreterCreateQuery.cpp
@@ -151,10 +151,20 @@ BlockIO InterpreterCreateQuery::createDatabase(ASTCreateQuery & create)
         /// When attaching old-style database during server startup, we must always use Ordinary engine
         if (create.attach)
             throw Exception("Database engine must be specified for ATTACH DATABASE query", ErrorCodes::UNKNOWN_DATABASE_ENGINE);
-        bool old_style_database = getContext()->getSettingsRef().default_database_engine.value == DefaultDatabaseEngine::Ordinary;
         auto engine = std::make_shared<ASTFunction>();
         auto storage = std::make_shared<ASTStorage>();
-        engine->name = old_style_database ? "Ordinary" : "Atomic";
+        auto default_database_engine = getContext()->getSettingsRef().default_database_engine.value;
+        switch (default_database_engine) {
+            case DefaultDatabaseEngine::Ordinary:
+                engine->name = "Ordinary";
+                break;
+            case DefaultDatabaseEngine::Replicated:
+                engine->name = "Replicated";
+                break;
+            default:
+                engine->name = "Atomic";
+                break;
+        }
         engine->no_empty_args = true;
         storage->set(storage->engine, engine);
         create.set(create.storage, storage);
@@ -226,6 +236,24 @@ BlockIO InterpreterCreateQuery::createDatabase(ASTCreateQuery & create)
         metadata_path = metadata_path / "metadata" / database_name_escaped;
     }
 
+    if (create.storage->engine->name == "Replicated" && !create.attach)
+    {
+        if (!create.storage->engine->arguments) {
+            create.storage->engine->arguments = std::make_shared<ASTExpressionList>();
+        }
+
+        /// Fill in default parameters
+        String default_zk_path_prefix = getContext()->getSettingsRef().database_replicated_default_zk_path_prefix.value;
+        if (create.storage->engine->arguments->children.size() == 0 && default_zk_path_prefix.size() > 0)
+            create.storage->engine->arguments->children.push_back(std::make_shared<ASTLiteral>(default_zk_path_prefix + database_name));
+
+        if (create.storage->engine->arguments->children.size() == 1)
+            create.storage->engine->arguments->children.push_back(std::make_shared<ASTLiteral>("{shard}"));
+
+        if (create.storage->engine->arguments->children.size() == 2)
+            create.storage->engine->arguments->children.push_back(std::make_shared<ASTLiteral>("{replica}"));
+    }
+
     if ((create.storage->engine->name == "MaterializeMySQL" || create.storage->engine->name == "MaterializedMySQL")
         && !getContext()->getSettingsRef().allow_experimental_database_materialized_mysql
         && !internal)
@@ -235,8 +263,7 @@ BlockIO InterpreterCreateQuery::createDatabase(ASTCreateQuery & create)
     }
 
     if (create.storage->engine->name == "Replicated"
-        && !getContext()->getSettingsRef().allow_experimental_database_replicated
-        && !internal)
+        && !getContext()->getSettingsRef().allow_experimental_database_replicated)
     {
         throw Exception("Replicated is an experimental database engine. "
                         "Enable allow_experimental_database_replicated to use it.", ErrorCodes::UNKNOWN_DATABASE_ENGINE);
@@ -973,6 +1000,15 @@ BlockIO InterpreterCreateQuery::createTable(ASTCreateQuery & create)
 
     String current_database = getContext()->getCurrentDatabase();
     auto database_name = create.database ? create.getDatabase() : current_database;
+    bool need_convert_table = !create.attach && create.storage && create.storage->engine &&
+                              getContext()->getSettingsRef().database_replicated_always_convert_table_to_replicated &&
+                              DatabaseCatalog::instance().getDatabase(database_name)->getEngineName() == "Replicated" &&
+                              !startsWith(create.storage->engine->name, "Replicated") && endsWith(create.storage->engine->name, "MergeTree");
+
+    if (need_convert_table) {
+        /// Convert *MergeTree to Replicated*MergeTree for table in database with engine Replicated when creating table
+        create.storage->engine->name = "Replicated" + create.storage->engine->name;
+    }        
 
     // If this is a stub ATTACH query, read the query definition from the database
     if (create.attach && !create.storage && !create.columns_list)
diff --git a/tests/integration/test_replicated_database/configs/default_replicated.xml b/tests/integration/test_replicated_database/configs/default_replicated.xml
new file mode 100644
index 0000000000..db1bbf608f
--- /dev/null
+++ b/tests/integration/test_replicated_database/configs/default_replicated.xml
@@ -0,0 +1,14 @@
+<clickhouse>
+    <profiles>
+        <default>
+            <allow_experimental_database_replicated>1</allow_experimental_database_replicated>
+            <default_database_engine>Replicated</default_database_engine>
+            <database_replicated_default_zk_path_prefix>/clickhouse/test/databases/</database_replicated_default_zk_path_prefix>
+        </default>
+    </profiles>
+    <users>
+        <default>
+            <profile>default</profile>
+        </default>
+    </users>
+</clickhouse>
\ No newline at end of file
diff --git a/tests/integration/test_replicated_database/test.py b/tests/integration/test_replicated_database/test.py
index 1f61a43eb7..108191b306 100644
--- a/tests/integration/test_replicated_database/test.py
+++ b/tests/integration/test_replicated_database/test.py
@@ -48,6 +48,13 @@ snapshot_recovering_node = cluster.add_instance(
     user_configs=["configs/settings.xml"],
     with_zookeeper=True,
 )
+default_replicated_node = cluster.add_instance(
+    "default_replicated_node",
+    main_configs=["configs/config.xml"],
+    user_configs=["configs/default_replicated.xml"],
+    with_zookeeper=True,
+    macros={"shard":1, "replica": 1},
+)
 
 all_nodes = [
     main_node,
@@ -55,6 +62,7 @@ all_nodes = [
     competing_node,
     snapshotting_node,
     snapshot_recovering_node,
+    default_replicated_node,
 ]
 
 uuid_regex = re.compile("[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}")
@@ -834,3 +842,16 @@ def test_server_uuid(started_cluster):
     main_node.restart_clickhouse()
     uuid1_after_restart = main_node.query("select serverUUID()")
     assert uuid1 == uuid1_after_restart
+
+
+def test_default_replicated_engine(started_cluster):
+    assert default_replicated_node.query("SHOW CREATE DATABASE default") == "CREATE DATABASE default\nENGINE = Replicated('/clickhouse/test/databases/default', '{shard}', '{replica}')"
+    default_replicated_node.query("DROP DATABASE IF EXISTS testdb")
+    default_replicated_node.query("CREATE DATABASE testdb")
+    assert default_replicated_node.query("SHOW CREATE DATABASE testdb") == "CREATE DATABASE testdb\nENGINE = Replicated('/clickhouse/test/databases/testdb', '{shard}', '{replica}')"
+    
+    default_replicated_node.query("CREATE TABLE test (n int) ENGINE=MergeTree")
+    assert "MergeTree" in default_replicated_node.query("SHOW CREATE TABLE test")
+    default_replicated_node.query("DROP TABLE test")
+    default_replicated_node.query("CREATE TABLE test (n int) ENGINE=MergeTree", settings={"database_replicated_always_convert_table_to_replicated": 1})
+    assert "ReplicatedMergeTree" in default_replicated_node.query("SHOW CREATE TABLE test")
\ No newline at end of file
diff --git a/tests/queries/0_stateless/02542_default_replicated_parameters.reference b/tests/queries/0_stateless/02542_default_replicated_parameters.reference
new file mode 100644
index 0000000000..6483cb0a77
--- /dev/null
+++ b/tests/queries/0_stateless/02542_default_replicated_parameters.reference
@@ -0,0 +1,2 @@
+CREATE DATABASE replicated_database_params\nENGINE = Replicated(\'/clickhouse/test1/databases/replicated_database_params\', \'{shard}\', \'{replica}\')
+CREATE DATABASE replicated_database_params\nENGINE = Replicated(\'/clickhouse/test/databases/replicated_database_params\', \'{shard}\', \'{replica}\')
diff --git a/tests/queries/0_stateless/02542_default_replicated_parameters.sql b/tests/queries/0_stateless/02542_default_replicated_parameters.sql
new file mode 100644
index 0000000000..e21e9e457e
--- /dev/null
+++ b/tests/queries/0_stateless/02542_default_replicated_parameters.sql
@@ -0,0 +1,14 @@
+-- Tags: replica, no-parallel
+
+SET allow_experimental_database_replicated = 1;
+SET database_replicated_default_zk_path_prefix = '/clickhouse/test/databases/';
+DROP DATABASE IF EXISTS replicated_database_params;
+
+CREATE DATABASE replicated_database_params ENGINE = Replicated('/clickhouse/test1/databases/replicated_database_params', '{shard}', '{replica}');
+SHOW CREATE DATABASE replicated_database_params;
+DROP DATABASE replicated_database_params;
+
+CREATE DATABASE replicated_database_params ENGINE = Replicated;
+SHOW CREATE DATABASE replicated_database_params;
+DROP DATABASE replicated_database_params;
+
-- 
2.32.1 (Apple Git-133)

