From 7ee471cc64175cb69eb56074246357abe66a0fb5 Mon Sep 17 00:00:00 2001
From: Qin Liu <lqgy2001@gmail.com>
Date: Tue, 23 May 2023 13:18:59 +0800
Subject: [PATCH 30/49] update search-index and fix tests

---
 contrib/search-index                                          | 2 +-
 src/Storages/MergeTree/ReplicatedVectorIndexTask.cpp          | 1 -
 src/Storages/MergeTree/VectorIndexMergeTreeTask.cpp           | 1 -
 src/VectorIndex/IndexException.h                              | 4 ++--
 src/VectorIndex/VectorIndexCommon.h                           | 2 +-
 src/VectorIndex/VectorSegmentExecutor.cpp                     | 1 +
 .../00019_mqvs_add_fail_status_in_vector_indices.reference    | 4 ++--
 ...qvs_replicated_add_fail_status_in_vector_indices.reference | 4 ++--
 8 files changed, 9 insertions(+), 10 deletions(-)

diff --git a/contrib/search-index b/contrib/search-index
index 517ac8352b..c028d113f9 160000
--- a/contrib/search-index
+++ b/contrib/search-index
@@ -1 +1 @@
-Subproject commit 517ac8352b13317049a87a66748f4702310536da
+Subproject commit c028d113f9cff34123b9918141357345d7995dfc
diff --git a/src/Storages/MergeTree/ReplicatedVectorIndexTask.cpp b/src/Storages/MergeTree/ReplicatedVectorIndexTask.cpp
index 5a8654643d..07263811df 100644
--- a/src/Storages/MergeTree/ReplicatedVectorIndexTask.cpp
+++ b/src/Storages/MergeTree/ReplicatedVectorIndexTask.cpp
@@ -69,7 +69,6 @@ bool ReplicatedVectorIndexTask::executeStep()
             catch (...)
             {
                 String exception_message = getCurrentExceptionMessage(false);
-                LOG_ERROR(log, "something went wrong during index building: {}", exception_message);
                 storage.updateVectorIndexBuildStatus(entry.source_parts[0], false, exception_message);
 
                 /// Set build error for part, avoid to build it again.
diff --git a/src/Storages/MergeTree/VectorIndexMergeTreeTask.cpp b/src/Storages/MergeTree/VectorIndexMergeTreeTask.cpp
index d3c6c37811..61e7704421 100644
--- a/src/Storages/MergeTree/VectorIndexMergeTreeTask.cpp
+++ b/src/Storages/MergeTree/VectorIndexMergeTreeTask.cpp
@@ -30,7 +30,6 @@ bool VectorIndexMergeTreeTask::executeStep()
         catch (...)
         {
             String exception_message = getCurrentExceptionMessage(false);
-            LOG_ERROR(log, "Something went wrong for {} during index building: {}", vector_index_entry->part_name, exception_message);
             storage.updateVectorIndexBuildStatus(vector_index_entry->part_name, false, exception_message);
 
             auto part = storage.getActiveContainingPart(vector_index_entry->part_name);
diff --git a/src/VectorIndex/IndexException.h b/src/VectorIndex/IndexException.h
index 38d6f3fbe7..40450d3bdb 100644
--- a/src/VectorIndex/IndexException.h
+++ b/src/VectorIndex/IndexException.h
@@ -6,12 +6,12 @@ namespace VectorIndex
 class IndexException : public DB::Exception
 {
 public:
-    IndexException(int code, const std::string & message) : DB::Exception(code, "[VectorIndex] " + message) { }
+    IndexException(int code, const std::string & message) : DB::Exception(code, "VectorIndex: " + message) { }
 
     // Format message with fmt::format, like the logging functions.
     template <typename... Args>
     IndexException(int code, const std::string & fmt, Args &&... args)
-        : DB::Exception(fmt::format(fmt::runtime("[VectorIndex] " + fmt), std::forward<Args>(args)...), code)
+        : DB::Exception(fmt::format(fmt::runtime("VectorIndex: " + fmt), std::forward<Args>(args)...), code)
     {
     }
 };
diff --git a/src/VectorIndex/VectorIndexCommon.h b/src/VectorIndex/VectorIndexCommon.h
index 98774246a5..200235e6bc 100644
--- a/src/VectorIndex/VectorIndexCommon.h
+++ b/src/VectorIndex/VectorIndexCommon.h
@@ -139,6 +139,6 @@ inline Search::Metric getMetric(const std::string & metric)
         return Search::Metric::IP;
     else if (upper == "COSINE")
         return Search::Metric::Cosine;
-    throw DB::Exception("Unknown metric: " + metric, DB::ErrorCodes::BAD_ARGUMENTS);
+    throw DB::Exception("Unknown metric type: " + metric, DB::ErrorCodes::BAD_ARGUMENTS);
 }
 }
diff --git a/src/VectorIndex/VectorSegmentExecutor.cpp b/src/VectorIndex/VectorSegmentExecutor.cpp
index f9e78926a3..59d4ff2864 100644
--- a/src/VectorIndex/VectorSegmentExecutor.cpp
+++ b/src/VectorIndex/VectorSegmentExecutor.cpp
@@ -238,6 +238,7 @@ void VectorSegmentExecutor::buildIndex(PartReader * reader, bool slow_mode, size
     }
     catch (const SearchIndexException & e)
     {
+        LOG_WARNING(log, "Failed to build index for {}: {}", segment_id.current_part_name, e.what());
         throw IndexException(e.getCode(), e.what());
     }
     catch (const DB::Exception & e)
diff --git a/tests/queries/2_vector_search/00019_mqvs_add_fail_status_in_vector_indices.reference b/tests/queries/2_vector_search/00019_mqvs_add_fail_status_in_vector_indices.reference
index c51386aa7c..0206337615 100644
--- a/tests/queries/2_vector_search/00019_mqvs_add_fail_status_in_vector_indices.reference
+++ b/tests/queries/2_vector_search/00019_mqvs_add_fail_status_in_vector_indices.reference
@@ -1,4 +1,4 @@
 0
-test_fail_vector	v1_fail	v1_fail vector TYPE HNSWSQ(\'metric_type = unknown\', \'ef_c=256\')	Error	all_1_1_0	 Unknown metric: unknown. (BAD_ARGUMENTS) (version 22.3.7.5)
-test_fail_vector_2	vindex	vindex vector TYPE IVFFLAT(\'metric=IP\', \'ncentroids=5000\')	Error	all_1_1_0	 [VectorIndex] Error(UNSUPPORTED_PARAMETER) in void Search::raiseErrorOnUnknownParams(const Search::Parameters &) at ./contrib/search-index/SearchIndex/SearchIndexCommon.h:284: Unknown parameter: metric=IP. (UNSUPPORTED_PARAMETER) (version 22.3.7.5)
+test_fail_vector	v1_fail	v1_fail vector TYPE HNSWSQ(\'metric_type = unknown\', \'ef_c=256\')	Error	all_1_1_0	 Unknown metric type: unknown. (BAD_ARGUMENTS) (version 22.3.7.5)
+test_fail_vector_2	vindex	vindex vector TYPE IVFFLAT(\'metric=IP\', \'ncentroids=5000\')	Error	all_1_1_0	 VectorIndex: Error(UNSUPPORTED_PARAMETER): Unknown parameter: metric=IP. (UNSUPPORTED_PARAMETER) (version 22.3.7.5)
 test_success_vector	v1_success	v1_success vector TYPE HNSWFLAT	Built		
diff --git a/tests/queries/2_vector_search/00019_mqvs_replicated_add_fail_status_in_vector_indices.reference b/tests/queries/2_vector_search/00019_mqvs_replicated_add_fail_status_in_vector_indices.reference
index 98e0498929..9dda784ba3 100644
--- a/tests/queries/2_vector_search/00019_mqvs_replicated_add_fail_status_in_vector_indices.reference
+++ b/tests/queries/2_vector_search/00019_mqvs_replicated_add_fail_status_in_vector_indices.reference
@@ -1,6 +1,6 @@
 0
 0
 0
-test_replicated_fail_vector	v1_fail	v1_fail vector TYPE HNSWSQ(\'metric_type = unknown\', \'ef_c=256\')	Error	all_0_0_0	 Unknown metric: unknown. (BAD_ARGUMENTS) (version 22.3.7.5)
-test_replicated_fail_vector_2	vindex	vindex vector TYPE IVFFLAT(\'metric=IP\', \'ncentroids=5000\')	Error	all_0_0_0	 [VectorIndex] Error(UNSUPPORTED_PARAMETER) in void Search::raiseErrorOnUnknownParams(const Search::Parameters &) at ./contrib/search-index/SearchIndex/SearchIndexCommon.h:284: Unknown parameter: metric=IP. (UNSUPPORTED_PARAMETER) (version 22.3.7.5)
+test_replicated_fail_vector	v1_fail	v1_fail vector TYPE HNSWSQ(\'metric_type = unknown\', \'ef_c=256\')	Error	all_0_0_0	 Unknown metric type: unknown. (BAD_ARGUMENTS) (version 22.3.7.5)
+test_replicated_fail_vector_2	vindex	vindex vector TYPE IVFFLAT(\'metric=IP\', \'ncentroids=5000\')	Error	all_0_0_0	 VectorIndex: Error(UNSUPPORTED_PARAMETER): Unknown parameter: metric=IP. (UNSUPPORTED_PARAMETER) (version 22.3.7.5)
 test_replicated_success_vector	v1_success	v1_success vector TYPE HNSWFLAT	Built		
-- 
2.32.1 (Apple Git-133)

