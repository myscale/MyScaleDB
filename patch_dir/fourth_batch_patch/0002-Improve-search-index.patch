From 14ea017fdc4d0ebdfa9dcf9cd2d445cd9d2f7b67 Mon Sep 17 00:00:00 2001
From: Qin Liu <qliu@moqi.ai>
Date: Thu, 27 Apr 2023 04:30:11 +0000
Subject: [PATCH 02/49] Improve search-index

---
 contrib/search-index                          |  2 +-
 .../MergeTree/MergeTreeDataMergerMutator.cpp  |  2 +
 src/Storages/MergeTree/MergeTreeSettings.h    |  1 +
 src/Storages/examples/merge_selector2.cpp     | 11 +++---
 src/VectorIndex/Metadata.cpp                  | 37 ++++++++++++++++---
 src/VectorIndex/Metadata.h                    |  9 +++--
 src/VectorIndex/VectorSegmentExecutor.cpp     |  9 ++++-
 7 files changed, 55 insertions(+), 16 deletions(-)

diff --git a/contrib/search-index b/contrib/search-index
index f9b53b9465..38415f2271 160000
--- a/contrib/search-index
+++ b/contrib/search-index
@@ -1 +1 @@
-Subproject commit f9b53b9465a96d4b6be6de1505beb4fe22dd2dad
+Subproject commit 38415f2271b66c5c793aa04a962684df7f430fc0
diff --git a/src/Storages/MergeTree/MergeTreeDataMergerMutator.cpp b/src/Storages/MergeTree/MergeTreeDataMergerMutator.cpp
index 88c8c7c1b8..e548fa9dc9 100644
--- a/src/Storages/MergeTree/MergeTreeDataMergerMutator.cpp
+++ b/src/Storages/MergeTree/MergeTreeDataMergerMutator.cpp
@@ -338,6 +338,8 @@ SelectPartsDecision MergeTreeDataMergerMutator::selectPartsToMerge(
         SimpleMergeSelector::Settings merge_settings;
         /// Override value from table settings
         merge_settings.max_parts_to_merge_at_once = data_settings->max_parts_to_merge_at_once;
+        if (!metadata_snapshot->vec_indices.empty())
+            merge_settings.base = data_settings->simple_merge_selector_base;
 
         if (aggressive)
             merge_settings.base = 1;
diff --git a/src/Storages/MergeTree/MergeTreeSettings.h b/src/Storages/MergeTree/MergeTreeSettings.h
index 8ca6243d77..0b954f9fd9 100644
--- a/src/Storages/MergeTree/MergeTreeSettings.h
+++ b/src/Storages/MergeTree/MergeTreeSettings.h
@@ -58,6 +58,7 @@ struct Settings;
     M(Bool, in_memory_parts_insert_sync, false, "If true insert of part with in-memory format will wait for fsync of WAL", 0) \
     M(UInt64, non_replicated_deduplication_window, 0, "How many last blocks of hashes should be kept on disk (0 - disabled).", 0) \
     M(UInt64, max_parts_to_merge_at_once, 100, "Max amount of parts which can be merged at once (0 - disabled). Doesn't affect OPTIMIZE FINAL query.", 0) \
+    M(Float, simple_merge_selector_base, 5, "Minimum ratio of size of one part to all parts in set of parts to merge (for usual cases).", 0) \
     M(UInt64, merge_selecting_sleep_ms, 5000, "Sleep time for merge selecting when no part selected, a lower setting will trigger selecting tasks in background_schedule_pool frequently which result in large amount of requests to zookeeper in large-scale clusters", 0) \
     M(UInt64, merge_tree_clear_old_temporary_directories_interval_seconds, 60, "The period of executing the clear old temporary directories operation in background.", 0) \
     M(UInt64, merge_tree_clear_old_parts_interval_seconds, 1, "The period of executing the clear old parts operation in background.", 0) \
diff --git a/src/Storages/examples/merge_selector2.cpp b/src/Storages/examples/merge_selector2.cpp
index fd05b2f3bb..54b40b8f9f 100644
--- a/src/Storages/examples/merge_selector2.cpp
+++ b/src/Storages/examples/merge_selector2.cpp
@@ -22,11 +22,12 @@ int main(int, char **)
     IMergeSelector::PartsRanges partitions(1);
     IMergeSelector::PartsRange & parts = partitions.back();
 
-/*    SimpleMergeSelector::Settings settings;
-    SimpleMergeSelector selector(settings);*/
+    SimpleMergeSelector::Settings settings;
+    settings.base = 2;
+    SimpleMergeSelector selector(settings);
 
-    LevelMergeSelector::Settings settings;
-    LevelMergeSelector selector(settings);
+    // LevelMergeSelector::Settings settings;
+    // LevelMergeSelector selector(settings);
 
     ReadBufferFromFileDescriptor in(STDIN_FILENO);
 
@@ -52,7 +53,7 @@ int main(int, char **)
 
     while (parts.size() > 1)
     {
-        IMergeSelector::PartsRange selected_parts = selector.select(partitions, 100ULL * 1024 * 1024 * 1024);
+        IMergeSelector::PartsRange selected_parts = selector.select(partitions, 5ULL * 1024 * 1024 * 1024);
 
         if (selected_parts.empty())
         {
diff --git a/src/VectorIndex/Metadata.cpp b/src/VectorIndex/Metadata.cpp
index bcffbc70b3..9affa80fff 100644
--- a/src/VectorIndex/Metadata.cpp
+++ b/src/VectorIndex/Metadata.cpp
@@ -63,20 +63,35 @@ void Metadata::readText(DB::ReadBuffer & buf)
     DB::readIntText(owner_part_id, buf);
     DB::assertChar('\n', buf);
 
+    String key;
+    String value;
+
     size_t num_params = 0;
     DB::assertString("num_params: ", buf);
     DB::readIntText(num_params, buf);
     DB::assertChar('\n', buf);
 
-    String key;
-    String value;
     for (size_t i = 0; i < num_params; i++)
     {
         readBackQuotedStringWithSQLStyle(key, buf);
         assertChar(' ', buf);
         readString(value, buf);
         assertChar('\n', buf);
-        des.setParam(key, value);
+        build_params.setParam(key, value);
+    }
+
+    size_t num_infos = 0;
+    DB::assertString("num_infos: ", buf);
+    DB::readIntText(num_infos, buf);
+    DB::assertChar('\n', buf);
+
+    for (size_t i = 0; i < num_infos; i++)
+    {
+        readBackQuotedStringWithSQLStyle(key, buf);
+        assertChar(' ', buf);
+        readString(value, buf);
+        assertChar('\n', buf);
+        infos[key] = value;
     }
 
     assertEOF(buf);
@@ -132,10 +147,22 @@ void Metadata::writeText(DB::WriteBuffer & buf) const
     DB::writeChar('\n', buf);
 
     DB::writeString("num_params: ", buf);
-    DB::writeIntText(des.size(), buf);
+    DB::writeIntText(build_params.size(), buf);
+    DB::writeChar('\n', buf);
+
+    for (const auto & it : build_params)
+    {
+        DB::writeBackQuotedString(it.first, buf);
+        DB::writeChar(' ', buf);
+        DB::writeString(it.second, buf);
+        DB::writeChar('\n', buf);
+    }
+
+    DB::writeString("num_infos: ", buf);
+    DB::writeIntText(infos.size(), buf);
     DB::writeChar('\n', buf);
 
-    for (const auto & it : des)
+    for (const auto & it : infos)
     {
         DB::writeBackQuotedString(it.first, buf);
         DB::writeChar(' ', buf);
diff --git a/src/VectorIndex/Metadata.h b/src/VectorIndex/Metadata.h
index f7ae4f05c2..ed732fab98 100644
--- a/src/VectorIndex/Metadata.h
+++ b/src/VectorIndex/Metadata.h
@@ -21,7 +21,8 @@ public:
         size_t dimension_,
         size_t total_vec_,
         bool fallback_to_flat_,
-        Search::Parameters des_)
+        Search::Parameters build_params_,
+        std::unordered_map<std::string, std::string> infos_)
         : segment_id(segment_id_)
         , version(version_)
         , type(type_)
@@ -29,7 +30,8 @@ public:
         , dimension(dimension_)
         , total_vec(total_vec_)
         , fallback_to_flat(fallback_to_flat_)
-        , des(des_)
+        , build_params(build_params_)
+        , infos(infos_)
     {
     }
 
@@ -43,6 +45,7 @@ public:
     size_t dimension;
     size_t total_vec;
     bool fallback_to_flat;
-    Search::Parameters des;
+    Search::Parameters build_params;
+    std::unordered_map<std::string, std::string> infos;
 };
 }
diff --git a/src/VectorIndex/VectorSegmentExecutor.cpp b/src/VectorIndex/VectorSegmentExecutor.cpp
index fd7d833944..2663b239bd 100644
--- a/src/VectorIndex/VectorSegmentExecutor.cpp
+++ b/src/VectorIndex/VectorSegmentExecutor.cpp
@@ -299,7 +299,12 @@ Status VectorSegmentExecutor::serialize()
         writeBitMap();
 
         std::string version = index->getVersion().toString();
-        Metadata metadata(segment_id, version, type, metric, dimension, total_vec, fallback_to_flat, des);
+        auto usage = index->getResourceUsage();
+        LOG_INFO(log, "memory_usage_bytes: {}, disk_usage_bytes: {}", usage.memory_usage_bytes, usage.disk_usage_bytes);
+        std::unordered_map<std::string, std::string> infos;
+        infos["memory_usage_bytes"] = std::to_string(usage.memory_usage_bytes);
+        infos["disk_usage_bytes"] = std::to_string(usage.disk_usage_bytes);
+        Metadata metadata(segment_id, version, type, metric, dimension, total_vec, fallback_to_flat, des, infos);
         auto buf = segment_id.volume->getDisk()->writeFile(segment_id.getVectorReadyFilePath(), 4096);
         metadata.writeText(*buf);
 
@@ -838,7 +843,7 @@ std::shared_ptr<Search::DiskIOManager> VectorSegmentExecutor::getDiskIOManager()
 
     std::lock_guard<std::mutex> lock(mutex);
     if (io_manager == nullptr)
-        io_manager = std::make_shared<Search::DiskIOManager>(4);
+        io_manager = std::make_shared<Search::DiskIOManager>(4, 64);
     return io_manager;
 }
 
-- 
2.32.1 (Apple Git-133)

