From a3e3f70a3b14553bbe8953e35cc911d4a0ce77e0 Mon Sep 17 00:00:00 2001
From: Qin Liu <qliu@moqi.ai>
Date: Sat, 6 May 2023 05:33:06 +0000
Subject: [PATCH 06/49] Upgrade vector search api and fix filtering for MSTG

---
 contrib/search-index                          |  2 +-
 .../MergeTree/MergeTreeVectorScanManager.cpp  | 22 ++--------
 src/VectorIndex/VectorSegmentExecutor.cpp     | 40 ++++++++++---------
 src/VectorIndex/VectorSegmentExecutor.h       | 11 ++---
 4 files changed, 29 insertions(+), 46 deletions(-)

diff --git a/contrib/search-index b/contrib/search-index
index 284fa4ee88..b782085d4d 160000
--- a/contrib/search-index
+++ b/contrib/search-index
@@ -1 +1 @@
-Subproject commit 284fa4ee88f9005a3512dc45c8f44f8f89f2ed1b
+Subproject commit b782085d4d88a1e29e6dd663cf37d8e81bc55d05
diff --git a/src/Storages/MergeTree/MergeTreeVectorScanManager.cpp b/src/Storages/MergeTree/MergeTreeVectorScanManager.cpp
index 305747fb35..cacd70d4ce 100644
--- a/src/Storages/MergeTree/MergeTreeVectorScanManager.cpp
+++ b/src/Storages/MergeTree/MergeTreeVectorScanManager.cpp
@@ -487,25 +487,9 @@ VectorScanResultPtr MergeTreeVectorScanManager::vectorScan(
 
             LOG_DEBUG(log, "Start search: vector num: {}", vec_data->getVectorNum());
 
-            std::vector<float> per_distance(k * vec_data->getVectorNum(), 0.0);
-            std::vector<int64_t> per_id(k * vec_data->getVectorNum(), -1);
-            float * distance_data = per_distance.data();
-            int64_t * id_data = per_id.data();
-
-            auto search_status = vec_executor->search(vec_data, k, distance_data, id_data, bits, search_params);
-            if (search_status.getCode() == 10)
-            {
-                throw Exception("Wrong dimension parameter", ErrorCodes::LOGICAL_ERROR);
-            }
-            else if (search_status.getCode() != 0)
-            {
-                LOG_WARNING(log, "Fail to search with vector index. code {}", search_status.getCode());
-                /// TODO: default vector search without vector index
-                throw Exception(
-                    "fail to search with vector index. code: " + std::to_string(search_status.getCode())
-                        + " message: " + search_status.getMessage(),
-                    ErrorCodes::LOGICAL_ERROR);
-            }
+            auto search_results = vec_executor->search(vec_data, k, bits, search_params);
+            auto per_id = search_results->getResultIndices();
+            auto per_distance = search_results->getResultDistances();
 
             if (is_batch)
             {
diff --git a/src/VectorIndex/VectorSegmentExecutor.cpp b/src/VectorIndex/VectorSegmentExecutor.cpp
index bb2685a58c..18c47aa326 100644
--- a/src/VectorIndex/VectorSegmentExecutor.cpp
+++ b/src/VectorIndex/VectorSegmentExecutor.cpp
@@ -69,6 +69,7 @@ namespace DB::ErrorCodes
 {
 extern const int STD_EXCEPTION;
 extern const int CORRUPTED_DATA;
+extern const int LOGICAL_ERROR;
 }
 
 namespace VectorIndex
@@ -532,11 +533,9 @@ Status VectorSegmentExecutor::load()
     }
 }
 
-Status VectorSegmentExecutor::search(
+std::shared_ptr<Search::SearchResult> VectorSegmentExecutor::search(
     VectorDatasetPtr dataset,
     int32_t k,
-    float *& distances,
-    int64_t *& labels,
     Search::DenseBitmapPtr & filter,
     Search::Parameters & parameters)
 {
@@ -545,22 +544,22 @@ Status VectorSegmentExecutor::search(
     // Check if the index is initialized and ready for searching
     if (index == nullptr)
     {
-        return Status(3, "Index not initialized before searching!");
+        throw IndexException(DB::ErrorCodes::LOGICAL_ERROR, "Index not initialized before searching!");
     }
     if (!index->ready())
     {
-        return Status(7, "Index not ready before searching!");
+        throw IndexException(DB::ErrorCodes::LOGICAL_ERROR, "Index not ready before searching!");
     }
 
     // Check if the dimensions of the searched index and input match
     if (dataset->getDimension() != static_cast<int64_t>(dimension))
     {
-        return Status(10, "The dimension of searched index and input doesn't match.");
+        throw IndexException(DB::ErrorCodes::LOGICAL_ERROR, "The dimension of searched index and input doesn't match.");
     }
 
     LOG_DEBUG(log, "Index {} has {} vectors", this->segment_id.getFullPath(), this->total_vec);
 
-    // SearchThreadLimiter limiter(log, max_threads);
+    SearchThreadLimiter limiter(log, max_threads);
 
     // Merge filter and delete_bitmap
     if (!delete_bitmap->all())
@@ -571,38 +570,43 @@ Status VectorSegmentExecutor::search(
     {
         if (fallback_to_flat)
             parameters.clear();
-        performSearch(dataset, k, distances, labels, filter, parameters);
+        if (filter)
+            LOG_DEBUG(
+                log, "searching with filter count: {}, filter ratio: {}", filter->count(), filter->count() / static_cast<float>(total_vec));
+        return performSearch(dataset, k, filter, parameters);
     }
     catch (const SearchIndexException & e)
     {
         LOG_ERROR(log, "SearchIndexException: {}", e.what());
-        return Status(e.getCode(), e.what());
+        throw IndexException(e.getCode(), e.what());
     }
     catch (const std::exception & e)
     {
-        return Status(DB::ErrorCodes::STD_EXCEPTION, e.what());
+        throw IndexException(DB::ErrorCodes::STD_EXCEPTION, e.what());
     }
-
-    return Status();
 }
 
-void VectorSegmentExecutor::performSearch(
+std::shared_ptr<Search::SearchResult> VectorSegmentExecutor::performSearch(
     VectorDatasetPtr dataset,
     int32_t k,
-    float *& distances,
-    int64_t *& labels,
     Search::DenseBitmapPtr & filter,
     Search::Parameters & parameters)
 {
+    std::shared_ptr<Search::SearchResult> ret;
     // Perform the actual search
     {
-        DB::OpenTelemetrySpanHolder span2("VectorSegmentExecutor::search::vector_index_search");
+        DB::OpenTelemetrySpanHolder span("VectorSegmentExecutor::performSearch()::search");
         auto query_dataset = std::make_shared<Search::DataSet<float>>(dataset->getData(), dataset->getVectorNum(), dataset->getDimension());
-        index->search(query_dataset, k, distances, labels, parameters, false, filter.get());
+        ret = index->search(query_dataset, k, parameters, false, filter.get());
     }
 
     // Transfer the results to newRowIds
-    transferToNewRowIds(labels, k * dataset->getVectorNum());
+    {
+        DB::OpenTelemetrySpanHolder span("VectorSegmentExecutor::performSearch()::transferToNewRowIds");
+        auto labels = ret->getResultIndices();
+        transferToNewRowIds(labels, k * dataset->getVectorNum());
+    }
+    return ret;
 }
 
 
diff --git a/src/VectorIndex/VectorSegmentExecutor.h b/src/VectorIndex/VectorSegmentExecutor.h
index 9f31c78129..d32571bacd 100644
--- a/src/VectorIndex/VectorSegmentExecutor.h
+++ b/src/VectorIndex/VectorSegmentExecutor.h
@@ -137,13 +137,10 @@ public:
     /// If hit in cache then simply redirect pointer.
     Status load();
 
-    /// A C style method that wraps VectorIndex::Search function and does some preprocessing.
-    /// Distance and labels are the pointers to expected results and should be declared before calling this method with proper size.
-    Status search(
+    /// A method that wraps VectorIndex::search() and does some check and post-process.
+    std::shared_ptr<Search::SearchResult> search(
         VectorDatasetPtr dataset,
         int32_t k,
-        float *& distances,
-        int64_t *& labels,
         Search::DenseBitmapPtr & filter,
         Search::Parameters & parameters);
 
@@ -224,11 +221,9 @@ private:
 
     void handleMergedMaps();
 
-    void performSearch(
+    std::shared_ptr<Search::SearchResult> performSearch(
         VectorDatasetPtr dataset,
         int32_t k,
-        float *& distances,
-        int64_t *& labels,
         Search::DenseBitmapPtr & filter,
         Search::Parameters & parameters);
 
-- 
2.32.1 (Apple Git-133)

