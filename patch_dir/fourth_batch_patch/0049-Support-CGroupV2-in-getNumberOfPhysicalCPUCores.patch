From 2799723c7604ca6d067b151c537645ac0054d1fe Mon Sep 17 00:00:00 2001
From: Qin Liu <lqgy2001@gmail.com>
Date: Fri, 9 Jun 2023 15:42:17 +0800
Subject: [PATCH 49/49] Support CGroupV2 in getNumberOfPhysicalCPUCores()

---
 src/Common/getNumberOfPhysicalCPUCores.cpp | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

diff --git a/src/Common/getNumberOfPhysicalCPUCores.cpp b/src/Common/getNumberOfPhysicalCPUCores.cpp
index 1d26b522e6..76c5ed6a11 100644
--- a/src/Common/getNumberOfPhysicalCPUCores.cpp
+++ b/src/Common/getNumberOfPhysicalCPUCores.cpp
@@ -12,6 +12,24 @@
 #include <thread>
 
 #if defined(OS_LINUX)
+unsigned getCGroupV2LimitedCPUCores(unsigned default_cpu_count)
+{
+    unsigned quota_count = default_cpu_count;
+    int cgroup_quota = -1;
+    int cgroup_period = -1;
+    std::ifstream infile("/sys/fs/cgroup/cpu.max");
+    if (!infile.is_open())
+        return default_cpu_count;
+    // Read the number of milliseconds per period process is guaranteed to run.
+    infile >> cgroup_quota >> cgroup_period;
+    if (cgroup_quota > -1 && cgroup_period > 0)
+    {
+        quota_count = ceil(static_cast<float>(cgroup_quota) / static_cast<float>(cgroup_period));
+    }
+
+    return std::min(default_cpu_count, quota_count);
+}
+
 unsigned getCGroupLimitedCPUCores(unsigned default_cpu_count)
 {
     // Try to look at cgroups limit if it is available.
@@ -78,6 +96,7 @@ unsigned getNumberOfPhysicalCPUCores()
 
 #if defined(OS_LINUX)
         /// TODO: add a setting for disabling that, similar to UseContainerSupport in java
+        cpu_count = getCGroupV2LimitedCPUCores(cpu_count);
         cpu_count = getCGroupLimitedCPUCores(cpu_count);
 #endif // OS_LINUX
         return cpu_count;
-- 
2.32.1 (Apple Git-133)

