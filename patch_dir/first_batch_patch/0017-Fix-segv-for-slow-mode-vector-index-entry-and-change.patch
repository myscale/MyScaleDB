From b0d1165d62418cc6eb50fc2464c8a919e1d64548 Mon Sep 17 00:00:00 2001
From: Jianmei Zhang <jianmeiz@moqi.ai>
Date: Tue, 20 Dec 2022 10:32:29 +0800
Subject: [PATCH 017/150] Fix segv for slow mode vector index entry, and change
 a setting option name for slow mode

---
 src/Storages/MergeTree/BackgroundJobsAssignee.cpp             | 2 +-
 src/Storages/MergeTree/MergeTreeSettings.h                    | 2 +-
 src/Storages/MergeTree/MergeTreeVectorIndexBuilderUpdater.h   | 3 ++-
 src/Storages/StorageReplicatedMergeTree.cpp                   | 4 ++--
 .../00017_mqvs_lightweight_delete_with_decouple.sql           | 2 +-
 5 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/src/Storages/MergeTree/BackgroundJobsAssignee.cpp b/src/Storages/MergeTree/BackgroundJobsAssignee.cpp
index d8f51ab223..e083ae67f2 100644
--- a/src/Storages/MergeTree/BackgroundJobsAssignee.cpp
+++ b/src/Storages/MergeTree/BackgroundJobsAssignee.cpp
@@ -92,7 +92,7 @@ void BackgroundJobsAssignee::scheduleVectorIndexTask(ExecutableTaskPtr vector_in
 void BackgroundJobsAssignee::scheduleSlowModeVectorIndexTask(ExecutableTaskPtr vector_index_task)
 {
     bool res = getContext()->getSlowModeVectorIndexExecutor()->trySchedule(vector_index_task);
-    LOG_DEBUG(&Poco::Logger::get("BackgroundJobsAssignee"),"vector try schedule response: {}", res);
+    LOG_DEBUG(&Poco::Logger::get("BackgroundJobsAssignee"),"slow mode vector try schedule response: {}", res);
     res ? trigger() : postpone();
 }
 
diff --git a/src/Storages/MergeTree/MergeTreeSettings.h b/src/Storages/MergeTree/MergeTreeSettings.h
index 7c35fa9a5d..41ad1e0aab 100644
--- a/src/Storages/MergeTree/MergeTreeSettings.h
+++ b/src/Storages/MergeTree/MergeTreeSettings.h
@@ -146,7 +146,7 @@ struct Settings;
     M(Bool, distable_rebuild_for_decouple, false, "(Test only) Disable rebuild of new vector indices for decouple.", 0) \
     M(UInt64, min_rows_to_build_vector_index, 0, "The minimum row size of data part to build vector index", 0) \
     M(String, vector_search_metric_type, "L2", "default metric type for brute force search", 0) \
-    M(UInt64, min_rows_for_slow_mode_vector_index_build, 100000, "The minimum row size of data part to build vector index using slow mode", 0) \
+    M(UInt64, max_rows_for_slow_mode_single_vector_index_build, 100000, "The max row number of data part to build vector index using slow mode", 0) \
     \
     /** Obsolete settings. Kept for backward compatibility only. */ \
     M(UInt64, min_relative_delay_to_yield_leadership, 120, "Obsolete setting, does nothing.", 0) \
diff --git a/src/Storages/MergeTree/MergeTreeVectorIndexBuilderUpdater.h b/src/Storages/MergeTree/MergeTreeVectorIndexBuilderUpdater.h
index 10a578f42b..cbe579504b 100644
--- a/src/Storages/MergeTree/MergeTreeVectorIndexBuilderUpdater.h
+++ b/src/Storages/MergeTree/MergeTreeVectorIndexBuilderUpdater.h
@@ -83,7 +83,8 @@ private:
 
     bool isSlowModePart(const MergeTreeDataPartPtr & part)
     {
-        return VectorIndex::containRowIdsMaps(part) || part->rows_count < data.getSettings()->min_rows_for_slow_mode_vector_index_build;
+        /// Smaller part built with single vector index is also treated as slow mode.
+        return VectorIndex::containRowIdsMaps(part) || part->rows_count < data.getSettings()->max_rows_for_slow_mode_single_vector_index_build;
     }
 };
 
diff --git a/src/Storages/StorageReplicatedMergeTree.cpp b/src/Storages/StorageReplicatedMergeTree.cpp
index c801f84287..1ea7b52580 100644
--- a/src/Storages/StorageReplicatedMergeTree.cpp
+++ b/src/Storages/StorageReplicatedMergeTree.cpp
@@ -2950,10 +2950,10 @@ bool StorageReplicatedMergeTree::scheduleDataProcessingJob(BackgroundJobsAssigne
                     metadata_snapshot, 1, true);
                 if (slow_mode_vector_index_entry)
                 {
-                    auto & parts = vector_index_entry->data_part_names;
+                    auto & parts = slow_mode_vector_index_entry->data_part_names;
                     LOG_DEBUG(log, "get {} data parts to build vector index", parts.size());
                     auto task = std::make_shared<VectorIndexMergeTreeTask>(
-                        *this, metadata_snapshot, vector_index_entry, vec_index_builder_updater, common_assignee_trigger, true);
+                        *this, metadata_snapshot, slow_mode_vector_index_entry, vec_index_builder_updater, common_assignee_trigger, true);
                     assignee.scheduleSlowModeVectorIndexTask(task);
                     return true;
                 }
diff --git a/tests/queries/2_vector_search/00017_mqvs_lightweight_delete_with_decouple.sql b/tests/queries/2_vector_search/00017_mqvs_lightweight_delete_with_decouple.sql
index 256fe5b348..890a838f2c 100644
--- a/tests/queries/2_vector_search/00017_mqvs_lightweight_delete_with_decouple.sql
+++ b/tests/queries/2_vector_search/00017_mqvs_lightweight_delete_with_decouple.sql
@@ -1,5 +1,5 @@
 DROP TABLE IF EXISTS test_vector;
-CREATE TABLE test_vector(id Float32, vector FixedArray(Float32, 3)) engine MergeTree primary key id SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1, distable_rebuild_for_decouple=true,min_rows_for_slow_mode_vector_index_build = 10;
+CREATE TABLE test_vector(id Float32, vector FixedArray(Float32, 3)) engine MergeTree primary key id SETTINGS index_granularity=1024, min_rows_to_build_vector_index=1, distable_rebuild_for_decouple=true,max_rows_for_slow_mode_single_vector_index_build = 10;
 INSERT INTO test_vector SELECT number, [number, number, number] FROM numbers(100);
 ALTER TABLE test_vector ADD VECTOR INDEX v1 vector TYPE HNSWFLAT;
 
-- 
2.32.1 (Apple Git-133)

