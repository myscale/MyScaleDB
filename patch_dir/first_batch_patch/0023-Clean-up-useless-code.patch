From 2a1f02c412ee3cbc4f2a981946c5753379da56d8 Mon Sep 17 00:00:00 2001
From: Qin Liu <lqgy2001@gmail.com>
Date: Mon, 26 Dec 2022 22:54:38 +0800
Subject: [PATCH 023/150] Clean up useless code

---
 src/VectorIndex/FlatIndex.h               |  3 ---
 src/VectorIndex/HNSWIndex.cpp             |  1 -
 src/VectorIndex/HNSWPQ.cpp                |  2 --
 src/VectorIndex/HNSWSQ.cpp                |  2 --
 src/VectorIndex/IVFFlatIndex.h            |  1 -
 src/VectorIndex/IVFPQIndex.h              |  1 -
 src/VectorIndex/IVFSQIndex.h              |  1 -
 src/VectorIndex/VectorIndex.h             |  4 ----
 src/VectorIndex/VectorSegmentExecutor.cpp | 28 -----------------------
 src/VectorIndex/VectorSegmentExecutor.h   |  7 ------
 10 files changed, 50 deletions(-)

diff --git a/src/VectorIndex/FlatIndex.h b/src/VectorIndex/FlatIndex.h
index 50f7e4e4b0..9cb21c4d08 100644
--- a/src/VectorIndex/FlatIndex.h
+++ b/src/VectorIndex/FlatIndex.h
@@ -24,12 +24,9 @@ namespace VectorIndex
 {
 class FlatIndex : public FaissIndex
 {
-    //the IVFPQ index type conforming to the generalized vector index standard,
-    //with these standarlization it could be used by execution engine.
 public:
     FlatIndex(IndexType it_, IndexMode im_, Metrics me_, int dimension_, Parameters parameters) : FaissIndex(it_, im_, me_, dimension_)
     {
-        in_mem = true;
         faiss::MetricType metrictype;
         switch (me)
         {
diff --git a/src/VectorIndex/HNSWIndex.cpp b/src/VectorIndex/HNSWIndex.cpp
index a14fa8bb6f..5e8cd5c4c5 100644
--- a/src/VectorIndex/HNSWIndex.cpp
+++ b/src/VectorIndex/HNSWIndex.cpp
@@ -19,7 +19,6 @@ namespace VectorIndex
 {
 void HNSWIndex::train(const VectorDatasetPtr dataset, int64_t total)
 {
-    in_mem = true;
     hnswlib::SpaceInterface<float> * space;
     switch (me)
     {
diff --git a/src/VectorIndex/HNSWPQ.cpp b/src/VectorIndex/HNSWPQ.cpp
index 0895088665..3990a00932 100644
--- a/src/VectorIndex/HNSWPQ.cpp
+++ b/src/VectorIndex/HNSWPQ.cpp
@@ -9,8 +9,6 @@ namespace VectorIndex
 {
 HNSWpq::HNSWpq(IndexType it_, IndexMode im_, Metrics me_, int dimension_, Parameters parameters) : VectorIndex(it_, im_, me_, dimension_)
 {
-    in_mem = false;
-    //TODO initialized index with dynamic fields
     faiss::MetricType metrictype;
 
     getMyParameters(parameters);
diff --git a/src/VectorIndex/HNSWSQ.cpp b/src/VectorIndex/HNSWSQ.cpp
index 96000e68b8..b6c25da5a4 100644
--- a/src/VectorIndex/HNSWSQ.cpp
+++ b/src/VectorIndex/HNSWSQ.cpp
@@ -16,8 +16,6 @@ namespace VectorIndex
 {
 HNSWsq::HNSWsq(IndexType it_, IndexMode im_, Metrics me_, int dimension_, Parameters parameters) : VectorIndex(it_, im_, me_, dimension_)
 {
-    in_mem = false;
-    //TODO initialized index with dynamic fields
     faiss::MetricType metrictype;
 
     getMyParameters(parameters);
diff --git a/src/VectorIndex/IVFFlatIndex.h b/src/VectorIndex/IVFFlatIndex.h
index 85f76a3eb5..ae1fbf6902 100644
--- a/src/VectorIndex/IVFFlatIndex.h
+++ b/src/VectorIndex/IVFFlatIndex.h
@@ -27,7 +27,6 @@ class IVFFlatIndex : public FaissIndex
 public:
     IVFFlatIndex(IndexType it_, IndexMode im_, Metrics me_, int dimension_, Parameters parameters) : FaissIndex(it_, im_, me_, dimension_)
     {
-        in_mem = false;
         getMyParameters(parameters);
     }
 
diff --git a/src/VectorIndex/IVFPQIndex.h b/src/VectorIndex/IVFPQIndex.h
index 7b477286f0..c02704706c 100644
--- a/src/VectorIndex/IVFPQIndex.h
+++ b/src/VectorIndex/IVFPQIndex.h
@@ -27,7 +27,6 @@ class IVFPQIndex : public FaissIndex
 public:
     IVFPQIndex(IndexType it_, IndexMode im_, Metrics me_, int dimension_, Parameters parameters) : FaissIndex(it_, im_, me_, dimension_)
     {
-        in_mem = false;
         getMyParameters(parameters);
     }
 
diff --git a/src/VectorIndex/IVFSQIndex.h b/src/VectorIndex/IVFSQIndex.h
index 7f23a6eb1c..c761b8d41d 100644
--- a/src/VectorIndex/IVFSQIndex.h
+++ b/src/VectorIndex/IVFSQIndex.h
@@ -27,7 +27,6 @@ class IVFSQIndex : public FaissIndex
 public:
     IVFSQIndex(IndexType it_, IndexMode im_, Metrics me_, int dimension_, Parameters parameters) : FaissIndex(it_, im_, me_, dimension_)
     {
-        in_mem = false;
         getMyParameters(parameters);
     }
 
diff --git a/src/VectorIndex/VectorIndex.h b/src/VectorIndex/VectorIndex.h
index ed93f3800e..d90dc4ae07 100644
--- a/src/VectorIndex/VectorIndex.h
+++ b/src/VectorIndex/VectorIndex.h
@@ -80,9 +80,6 @@ public:
 
     Metrics metrics() { return me; }
 
-    /// Whether the data in index is uncompressed
-    bool inMemVectors() { return in_mem; }
-
     void setTrained() { trained = true; }
 
     bool trainStatus() { return trained; }
@@ -144,7 +141,6 @@ protected:
     Metrics me; // L1, L2, IP, Cosine
     IndexMode im; // cpu, gpu
     int dimension; // dimension
-    bool in_mem; // if vectors are stored fully in mem
     bool trained = false; // searchabled
     BinaryPtr rawData; // unfortunately to boost load speed we have to manage rawData ourselves
     int64_t total_vector = 0;
diff --git a/src/VectorIndex/VectorSegmentExecutor.cpp b/src/VectorIndex/VectorSegmentExecutor.cpp
index 5a72ccbf83..fe932686db 100644
--- a/src/VectorIndex/VectorSegmentExecutor.cpp
+++ b/src/VectorIndex/VectorSegmentExecutor.cpp
@@ -738,15 +738,6 @@ Status VectorSegmentExecutor::searchWithoutIndex(
         metrics);
 }
 
-float * VectorSegmentExecutor::getDataInMem()
-{
-    if (index->inMemVectors())
-    {
-        return index->getInMemVectors()->getData();
-    }
-    return nullptr;
-}
-
 Status VectorSegmentExecutor::copyToCpu()
 {
     //TODO
@@ -965,25 +956,6 @@ Status VectorSegmentExecutor::removeByIds(int64_t n, int64_t * ids)
     }
 }
 
-GeneralBitMapPtr VectorSegmentExecutor::getDeleteBitMapCopy()
-{
-    if (delete_bitmap != nullptr)
-    {
-        GeneralBitMapPtr copy = std::make_shared<GeneralBitMap>();
-        char * bits = new char[total_vec];
-        memcpy(bits, delete_bitmap->bitmap, (total_vec >> 3) + 1);
-        copy->bitmap = bits;
-        copy->size = total_vec;
-        return copy;
-    }
-    else
-    {
-        GeneralBitMapPtr copy = std::make_shared<GeneralBitMap>(total_vec);
-        memset(copy->bitmap, 255, (total_vec / 8) + 1);
-        return copy;
-    }
-}
-
 bool VectorSegmentExecutor::writeBitMap()
 {
     DiskIOWriter bit_map_writer;
diff --git a/src/VectorIndex/VectorSegmentExecutor.h b/src/VectorIndex/VectorSegmentExecutor.h
index dc10ab85ce..a95efae224 100644
--- a/src/VectorIndex/VectorSegmentExecutor.h
+++ b/src/VectorIndex/VectorSegmentExecutor.h
@@ -111,15 +111,8 @@ public:
 
     Status removeByIds(int64_t n, int64_t * ids);
 
-    GeneralBitMapPtr getDeleteBitMapCopy();
-
     GeneralBitMapPtr getDeleteBitMap() { return this->delete_bitmap; }
 
-    /// If index is flat, then the index has uncompressed vectors.
-    /// We can read all vectors directly from memory and use them to build new index.
-    /// If vectors in mem is compressed, this methods does nothing.
-    float * getDataInMem();
-
     ///return total number of vectors.
     int64_t getRawDataSize();
 
-- 
2.32.1 (Apple Git-133)

